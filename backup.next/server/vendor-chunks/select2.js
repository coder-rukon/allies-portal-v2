"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/select2";
exports.ids = ["vendor-chunks/select2"];
exports.modules = {

/***/ "(ssr)/./node_modules/select2/dist/js/select2.js":
/*!*************************************************!*\
  !*** ./node_modules/select2/dist/js/select2.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n(function(factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function(jQuery1) {\n    // This is needed so we can catch the AMD loader configuration and use it\n    // The inner file should be wrapped (by `banner.start.js`) in a function that\n    // returns the AMD loader references.\n    var S2 = function() {\n        // Restore the Select2 AMD loader so it can be used\n        // Needed mostly in the language files, where the loader is not inserted\n        if (jQuery1 && jQuery1.fn && jQuery1.fn.select2 && jQuery1.fn.select2.amd) {\n            var S2 = jQuery1.fn.select2.amd;\n        }\n        var S2;\n        (function() {\n            if (!S2 || !S2.requirejs) {\n                if (!S2) {\n                    S2 = {};\n                } else {\n                    require1 = S2;\n                }\n                /**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */ //Going sloppy to avoid 'use strict' string cost, but strict practices should\n                //be followed.\n                /*global setTimeout: false */ var requirejs, require1, define1;\n                (function(undef) {\n                    var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice, jsSuffixRegExp = /\\.js$/;\n                    function hasProp(obj, prop) {\n                        return hasOwn.call(obj, prop);\n                    }\n                    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */ function normalize(name, baseName) {\n                        var nameParts, nameSegment, mapValue, foundMap, lastIndex, foundI, foundStarMap, starI, i, j, part, normalizedBaseParts, baseParts = baseName && baseName.split(\"/\"), map = config.map, starMap = map && map[\"*\"] || {};\n                        //Adjust any relative paths.\n                        if (name) {\n                            name = name.split(\"/\");\n                            lastIndex = name.length - 1;\n                            // If wanting node ID compatibility, strip .js from end\n                            // of IDs. Have to do this here, and not in nameToUrl\n                            // because node allows either .js or non .js to map\n                            // to same file.\n                            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, \"\");\n                            }\n                            // Starts with a '.' so need the baseName\n                            if (name[0].charAt(0) === \".\" && baseParts) {\n                                //Convert baseName to array, and lop off the last part,\n                                //so that . matches that 'directory' and not name of the baseName's\n                                //module. For instance, baseName of 'one/two/three', maps to\n                                //'one/two/three.js', but we want the directory, 'one/two' for\n                                //this normalization.\n                                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                                name = normalizedBaseParts.concat(name);\n                            }\n                            //start trimDots\n                            for(i = 0; i < name.length; i++){\n                                part = name[i];\n                                if (part === \".\") {\n                                    name.splice(i, 1);\n                                    i -= 1;\n                                } else if (part === \"..\") {\n                                    // If at the start, or previous value is still ..,\n                                    // keep them so that when converted to a path it may\n                                    // still work when converted to a path, even though\n                                    // as an ID it is less than ideal. In larger point\n                                    // releases, may be better to just kick out an error.\n                                    if (i === 0 || i === 1 && name[2] === \"..\" || name[i - 1] === \"..\") {\n                                        continue;\n                                    } else if (i > 0) {\n                                        name.splice(i - 1, 2);\n                                        i -= 2;\n                                    }\n                                }\n                            }\n                            //end trimDots\n                            name = name.join(\"/\");\n                        }\n                        //Apply map config if available.\n                        if ((baseParts || starMap) && map) {\n                            nameParts = name.split(\"/\");\n                            for(i = nameParts.length; i > 0; i -= 1){\n                                nameSegment = nameParts.slice(0, i).join(\"/\");\n                                if (baseParts) {\n                                    //Find the longest baseName segment match in the config.\n                                    //So, do joins on the biggest to smallest lengths of baseParts.\n                                    for(j = baseParts.length; j > 0; j -= 1){\n                                        mapValue = map[baseParts.slice(0, j).join(\"/\")];\n                                        //baseName segment has  config, find if it has one for\n                                        //this name.\n                                        if (mapValue) {\n                                            mapValue = mapValue[nameSegment];\n                                            if (mapValue) {\n                                                //Match, update name to the new value.\n                                                foundMap = mapValue;\n                                                foundI = i;\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                if (foundMap) {\n                                    break;\n                                }\n                                //Check for a star map match, but just hold on to it,\n                                //if there is a shorter segment match later in a matching\n                                //config, then favor over this star map.\n                                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                                    foundStarMap = starMap[nameSegment];\n                                    starI = i;\n                                }\n                            }\n                            if (!foundMap && foundStarMap) {\n                                foundMap = foundStarMap;\n                                foundI = starI;\n                            }\n                            if (foundMap) {\n                                nameParts.splice(0, foundI, foundMap);\n                                name = nameParts.join(\"/\");\n                            }\n                        }\n                        return name;\n                    }\n                    function makeRequire(relName, forceSync) {\n                        return function() {\n                            //A version of a require function that passes a moduleName\n                            //value for items that may need to\n                            //look up paths relative to the moduleName\n                            var args = aps.call(arguments, 0);\n                            //If first arg is not require('string'), and there is only\n                            //one arg, it is the array form without a callback. Insert\n                            //a null so that the following concat is correct.\n                            if (typeof args[0] !== \"string\" && args.length === 1) {\n                                args.push(null);\n                            }\n                            return req.apply(undef, args.concat([\n                                relName,\n                                forceSync\n                            ]));\n                        };\n                    }\n                    function makeNormalize(relName) {\n                        return function(name) {\n                            return normalize(name, relName);\n                        };\n                    }\n                    function makeLoad(depName) {\n                        return function(value) {\n                            defined[depName] = value;\n                        };\n                    }\n                    function callDep(name) {\n                        if (hasProp(waiting, name)) {\n                            var args = waiting[name];\n                            delete waiting[name];\n                            defining[name] = true;\n                            main.apply(undef, args);\n                        }\n                        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n                            throw new Error(\"No \" + name);\n                        }\n                        return defined[name];\n                    }\n                    //Turns a plugin!resource to [plugin, resource]\n                    //with the plugin being undefined if the name\n                    //did not have a plugin prefix.\n                    function splitPrefix(name) {\n                        var prefix, index = name ? name.indexOf(\"!\") : -1;\n                        if (index > -1) {\n                            prefix = name.substring(0, index);\n                            name = name.substring(index + 1, name.length);\n                        }\n                        return [\n                            prefix,\n                            name\n                        ];\n                    }\n                    //Creates a parts array for a relName where first part is plugin ID,\n                    //second part is resource ID. Assumes relName has already been normalized.\n                    function makeRelParts(relName) {\n                        return relName ? splitPrefix(relName) : [];\n                    }\n                    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */ makeMap = function(name, relParts) {\n                        var plugin, parts = splitPrefix(name), prefix = parts[0], relResourceName = relParts[1];\n                        name = parts[1];\n                        if (prefix) {\n                            prefix = normalize(prefix, relResourceName);\n                            plugin = callDep(prefix);\n                        }\n                        //Normalize according\n                        if (prefix) {\n                            if (plugin && plugin.normalize) {\n                                name = plugin.normalize(name, makeNormalize(relResourceName));\n                            } else {\n                                name = normalize(name, relResourceName);\n                            }\n                        } else {\n                            name = normalize(name, relResourceName);\n                            parts = splitPrefix(name);\n                            prefix = parts[0];\n                            name = parts[1];\n                            if (prefix) {\n                                plugin = callDep(prefix);\n                            }\n                        }\n                        //Using ridiculous property names for space reasons\n                        return {\n                            f: prefix ? prefix + \"!\" + name : name,\n                            n: name,\n                            pr: prefix,\n                            p: plugin\n                        };\n                    };\n                    function makeConfig(name) {\n                        return function() {\n                            return config && config.config && config.config[name] || {};\n                        };\n                    }\n                    handlers = {\n                        require: function(name) {\n                            return makeRequire(name);\n                        },\n                        exports: function(name) {\n                            var e = defined[name];\n                            if (typeof e !== \"undefined\") {\n                                return e;\n                            } else {\n                                return defined[name] = {};\n                            }\n                        },\n                        module: function(name) {\n                            return {\n                                id: name,\n                                uri: \"\",\n                                exports: defined[name],\n                                config: makeConfig(name)\n                            };\n                        }\n                    };\n                    main = function(name, deps, callback, relName) {\n                        var cjsModule, depName, ret, map, i, relParts, args = [], callbackType = typeof callback, usingExports;\n                        //Use name if no relName\n                        relName = relName || name;\n                        relParts = makeRelParts(relName);\n                        //Call the callback to define the module, if necessary.\n                        if (callbackType === \"undefined\" || callbackType === \"function\") {\n                            //Pull out the defined dependencies and pass the ordered\n                            //values to the callback.\n                            //Default to [require, exports, module] if no deps\n                            deps = !deps.length && callback.length ? [\n                                \"require\",\n                                \"exports\",\n                                \"module\"\n                            ] : deps;\n                            for(i = 0; i < deps.length; i += 1){\n                                map = makeMap(deps[i], relParts);\n                                depName = map.f;\n                                //Fast path CommonJS standard dependencies.\n                                if (depName === \"require\") {\n                                    args[i] = handlers.require(name);\n                                } else if (depName === \"exports\") {\n                                    //CommonJS module spec 1.1\n                                    args[i] = handlers.exports(name);\n                                    usingExports = true;\n                                } else if (depName === \"module\") {\n                                    //CommonJS module spec 1.1\n                                    cjsModule = args[i] = handlers.module(name);\n                                } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {\n                                    args[i] = callDep(depName);\n                                } else if (map.p) {\n                                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                                    args[i] = defined[depName];\n                                } else {\n                                    throw new Error(name + \" missing \" + depName);\n                                }\n                            }\n                            ret = callback ? callback.apply(defined[name], args) : undefined;\n                            if (name) {\n                                //If setting exports via \"module\" is in play,\n                                //favor that over return value and exports. After that,\n                                //favor a non-undefined return value over exports use.\n                                if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {\n                                    defined[name] = cjsModule.exports;\n                                } else if (ret !== undef || !usingExports) {\n                                    //Use the return value from the function.\n                                    defined[name] = ret;\n                                }\n                            }\n                        } else if (name) {\n                            //May just be an object definition for the module. Only\n                            //worry about defining if have a module name.\n                            defined[name] = callback;\n                        }\n                    };\n                    requirejs = require1 = req = function(deps, callback, relName, forceSync, alt) {\n                        if (typeof deps === \"string\") {\n                            if (handlers[deps]) {\n                                //callback in this case is really relName\n                                return handlers[deps](callback);\n                            }\n                            //Just return the module wanted. In this scenario, the\n                            //deps arg is the module name, and second arg (if passed)\n                            //is just the relName.\n                            //Normalize module name, if it contains . or ..\n                            return callDep(makeMap(deps, makeRelParts(callback)).f);\n                        } else if (!deps.splice) {\n                            //deps is a config object, not an array.\n                            config = deps;\n                            if (config.deps) {\n                                req(config.deps, config.callback);\n                            }\n                            if (!callback) {\n                                return;\n                            }\n                            if (callback.splice) {\n                                //callback is an array, which means it is a dependency list.\n                                //Adjust args if there are dependencies\n                                deps = callback;\n                                callback = relName;\n                                relName = null;\n                            } else {\n                                deps = undef;\n                            }\n                        }\n                        //Support require(['a'])\n                        callback = callback || function() {};\n                        //If relName is a function, it is an errback handler,\n                        //so remove it.\n                        if (typeof relName === \"function\") {\n                            relName = forceSync;\n                            forceSync = alt;\n                        }\n                        //Simulate async callback;\n                        if (forceSync) {\n                            main(undef, deps, callback, relName);\n                        } else {\n                            //Using a non-zero value because of concern for what old browsers\n                            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n                            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n                            //If want a value immediately, use require('id') instead -- something\n                            //that works in almond on the global level, but not guaranteed and\n                            //unlikely to work in other AMD implementations.\n                            setTimeout(function() {\n                                main(undef, deps, callback, relName);\n                            }, 4);\n                        }\n                        return req;\n                    };\n                    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */ req.config = function(cfg) {\n                        return req(cfg);\n                    };\n                    /**\n     * Expose module registry for debugging and tooling\n     */ requirejs._defined = defined;\n                    define1 = function(name, deps, callback) {\n                        if (typeof name !== \"string\") {\n                            throw new Error(\"See almond README: incorrect module build, no module name\");\n                        }\n                        //This module may not have dependencies\n                        if (!deps.splice) {\n                            //deps is not an array, so probably means\n                            //an object literal or factory function for\n                            //the value. Adjust args.\n                            callback = deps;\n                            deps = [];\n                        }\n                        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n                            waiting[name] = [\n                                name,\n                                deps,\n                                callback\n                            ];\n                        }\n                    };\n                    define1.amd = {\n                        jQuery: true\n                    };\n                })();\n                S2.requirejs = requirejs;\n                S2.require = require1;\n                S2.define = define1;\n            }\n        })();\n        S2.define(\"almond\", function() {});\n        /* global jQuery:false, $:false */ S2.define(\"jquery\", [], function() {\n            var _$ = jQuery1 || $;\n            if (_$ == null && console && console.error) {\n                console.error(\"Select2: An instance of jQuery or a jQuery-compatible library was not \" + \"found. Make sure that you are including jQuery before Select2 on your \" + \"web page.\");\n            }\n            return _$;\n        });\n        S2.define(\"select2/utils\", [\n            \"jquery\"\n        ], function($1) {\n            var Utils = {};\n            Utils.Extend = function(ChildClass, SuperClass) {\n                var __hasProp = {}.hasOwnProperty;\n                function BaseConstructor() {\n                    this.constructor = ChildClass;\n                }\n                for(var key in SuperClass){\n                    if (__hasProp.call(SuperClass, key)) {\n                        ChildClass[key] = SuperClass[key];\n                    }\n                }\n                BaseConstructor.prototype = SuperClass.prototype;\n                ChildClass.prototype = new BaseConstructor();\n                ChildClass.__super__ = SuperClass.prototype;\n                return ChildClass;\n            };\n            function getMethods(theClass) {\n                var proto = theClass.prototype;\n                var methods = [];\n                for(var methodName in proto){\n                    var m = proto[methodName];\n                    if (typeof m !== \"function\") {\n                        continue;\n                    }\n                    if (methodName === \"constructor\") {\n                        continue;\n                    }\n                    methods.push(methodName);\n                }\n                return methods;\n            }\n            Utils.Decorate = function(SuperClass, DecoratorClass) {\n                var decoratedMethods = getMethods(DecoratorClass);\n                var superMethods = getMethods(SuperClass);\n                function DecoratedClass() {\n                    var unshift = Array.prototype.unshift;\n                    var argCount = DecoratorClass.prototype.constructor.length;\n                    var calledConstructor = SuperClass.prototype.constructor;\n                    if (argCount > 0) {\n                        unshift.call(arguments, SuperClass.prototype.constructor);\n                        calledConstructor = DecoratorClass.prototype.constructor;\n                    }\n                    calledConstructor.apply(this, arguments);\n                }\n                DecoratorClass.displayName = SuperClass.displayName;\n                function ctr() {\n                    this.constructor = DecoratedClass;\n                }\n                DecoratedClass.prototype = new ctr();\n                for(var m = 0; m < superMethods.length; m++){\n                    var superMethod = superMethods[m];\n                    DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod];\n                }\n                var calledMethod = function(methodName) {\n                    // Stub out the original method if it's not decorating an actual method\n                    var originalMethod = function() {};\n                    if (methodName in DecoratedClass.prototype) {\n                        originalMethod = DecoratedClass.prototype[methodName];\n                    }\n                    var decoratedMethod = DecoratorClass.prototype[methodName];\n                    return function() {\n                        var unshift = Array.prototype.unshift;\n                        unshift.call(arguments, originalMethod);\n                        return decoratedMethod.apply(this, arguments);\n                    };\n                };\n                for(var d = 0; d < decoratedMethods.length; d++){\n                    var decoratedMethod = decoratedMethods[d];\n                    DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);\n                }\n                return DecoratedClass;\n            };\n            var Observable = function() {\n                this.listeners = {};\n            };\n            Observable.prototype.on = function(event, callback) {\n                this.listeners = this.listeners || {};\n                if (event in this.listeners) {\n                    this.listeners[event].push(callback);\n                } else {\n                    this.listeners[event] = [\n                        callback\n                    ];\n                }\n            };\n            Observable.prototype.trigger = function(event) {\n                var slice = Array.prototype.slice;\n                var params = slice.call(arguments, 1);\n                this.listeners = this.listeners || {};\n                // Params should always come in as an array\n                if (params == null) {\n                    params = [];\n                }\n                // If there are no arguments to the event, use a temporary object\n                if (params.length === 0) {\n                    params.push({});\n                }\n                // Set the `_type` of the first object to the event\n                params[0]._type = event;\n                if (event in this.listeners) {\n                    this.invoke(this.listeners[event], slice.call(arguments, 1));\n                }\n                if (\"*\" in this.listeners) {\n                    this.invoke(this.listeners[\"*\"], arguments);\n                }\n            };\n            Observable.prototype.invoke = function(listeners, params) {\n                for(var i = 0, len = listeners.length; i < len; i++){\n                    listeners[i].apply(this, params);\n                }\n            };\n            Utils.Observable = Observable;\n            Utils.generateChars = function(length) {\n                var chars = \"\";\n                for(var i = 0; i < length; i++){\n                    var randomChar = Math.floor(Math.random() * 36);\n                    chars += randomChar.toString(36);\n                }\n                return chars;\n            };\n            Utils.bind = function(func, context) {\n                return function() {\n                    func.apply(context, arguments);\n                };\n            };\n            Utils._convertData = function(data) {\n                for(var originalKey in data){\n                    var keys = originalKey.split(\"-\");\n                    var dataLevel = data;\n                    if (keys.length === 1) {\n                        continue;\n                    }\n                    for(var k = 0; k < keys.length; k++){\n                        var key = keys[k];\n                        // Lowercase the first letter\n                        // By default, dash-separated becomes camelCase\n                        key = key.substring(0, 1).toLowerCase() + key.substring(1);\n                        if (!(key in dataLevel)) {\n                            dataLevel[key] = {};\n                        }\n                        if (k == keys.length - 1) {\n                            dataLevel[key] = data[originalKey];\n                        }\n                        dataLevel = dataLevel[key];\n                    }\n                    delete data[originalKey];\n                }\n                return data;\n            };\n            Utils.hasScroll = function(index, el) {\n                // Adapted from the function created by @ShadowScripter\n                // and adapted by @BillBarry on the Stack Exchange Code Review website.\n                // The original code can be found at\n                // http://codereview.stackexchange.com/q/13338\n                // and was designed to be used with the Sizzle selector engine.\n                var $el = $1(el);\n                var overflowX = el.style.overflowX;\n                var overflowY = el.style.overflowY;\n                //Check both x and y declarations\n                if (overflowX === overflowY && (overflowY === \"hidden\" || overflowY === \"visible\")) {\n                    return false;\n                }\n                if (overflowX === \"scroll\" || overflowY === \"scroll\") {\n                    return true;\n                }\n                return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth;\n            };\n            Utils.escapeMarkup = function(markup) {\n                var replaceMap = {\n                    \"\\\\\": \"&#92;\",\n                    \"&\": \"&amp;\",\n                    \"<\": \"&lt;\",\n                    \">\": \"&gt;\",\n                    '\"': \"&quot;\",\n                    \"'\": \"&#39;\",\n                    \"/\": \"&#47;\"\n                };\n                // Do not try to escape the markup if it's not a string\n                if (typeof markup !== \"string\") {\n                    return markup;\n                }\n                return String(markup).replace(/[&<>\"'\\/\\\\]/g, function(match) {\n                    return replaceMap[match];\n                });\n            };\n            // Cache objects in Utils.__cache instead of $.data (see #4346)\n            Utils.__cache = {};\n            var id = 0;\n            Utils.GetUniqueElementId = function(element) {\n                // Get a unique element Id. If element has no id,\n                // creates a new unique number, stores it in the id\n                // attribute and returns the new id with a prefix.\n                // If an id already exists, it simply returns it with a prefix.\n                var select2Id = element.getAttribute(\"data-select2-id\");\n                if (select2Id != null) {\n                    return select2Id;\n                }\n                // If element has id, use it.\n                if (element.id) {\n                    select2Id = \"select2-data-\" + element.id;\n                } else {\n                    select2Id = \"select2-data-\" + (++id).toString() + \"-\" + Utils.generateChars(4);\n                }\n                element.setAttribute(\"data-select2-id\", select2Id);\n                return select2Id;\n            };\n            Utils.StoreData = function(element, name, value) {\n                // Stores an item in the cache for a specified element.\n                // name is the cache key.\n                var id = Utils.GetUniqueElementId(element);\n                if (!Utils.__cache[id]) {\n                    Utils.__cache[id] = {};\n                }\n                Utils.__cache[id][name] = value;\n            };\n            Utils.GetData = function(element, name) {\n                // Retrieves a value from the cache by its key (name)\n                // name is optional. If no name specified, return\n                // all cache items for the specified element.\n                // and for a specified element.\n                var id = Utils.GetUniqueElementId(element);\n                if (name) {\n                    if (Utils.__cache[id]) {\n                        if (Utils.__cache[id][name] != null) {\n                            return Utils.__cache[id][name];\n                        }\n                        return $1(element).data(name); // Fallback to HTML5 data attribs.\n                    }\n                    return $1(element).data(name); // Fallback to HTML5 data attribs.\n                } else {\n                    return Utils.__cache[id];\n                }\n            };\n            Utils.RemoveData = function(element) {\n                // Removes all cached items for a specified element.\n                var id = Utils.GetUniqueElementId(element);\n                if (Utils.__cache[id] != null) {\n                    delete Utils.__cache[id];\n                }\n                element.removeAttribute(\"data-select2-id\");\n            };\n            Utils.copyNonInternalCssClasses = function(dest, src) {\n                var classes;\n                var destinationClasses = dest.getAttribute(\"class\").trim().split(/\\s+/);\n                destinationClasses = destinationClasses.filter(function(clazz) {\n                    // Save all Select2 classes\n                    return clazz.indexOf(\"select2-\") === 0;\n                });\n                var sourceClasses = src.getAttribute(\"class\").trim().split(/\\s+/);\n                sourceClasses = sourceClasses.filter(function(clazz) {\n                    // Only copy non-Select2 classes\n                    return clazz.indexOf(\"select2-\") !== 0;\n                });\n                var replacements = destinationClasses.concat(sourceClasses);\n                dest.setAttribute(\"class\", replacements.join(\" \"));\n            };\n            return Utils;\n        });\n        S2.define(\"select2/results\", [\n            \"jquery\",\n            \"./utils\"\n        ], function($1, Utils) {\n            function Results($element, options, dataAdapter) {\n                this.$element = $element;\n                this.data = dataAdapter;\n                this.options = options;\n                Results.__super__.constructor.call(this);\n            }\n            Utils.Extend(Results, Utils.Observable);\n            Results.prototype.render = function() {\n                var $results = $1('<ul class=\"select2-results__options\" role=\"listbox\"></ul>');\n                if (this.options.get(\"multiple\")) {\n                    $results.attr(\"aria-multiselectable\", \"true\");\n                }\n                this.$results = $results;\n                return $results;\n            };\n            Results.prototype.clear = function() {\n                this.$results.empty();\n            };\n            Results.prototype.displayMessage = function(params) {\n                var escapeMarkup = this.options.get(\"escapeMarkup\");\n                this.clear();\n                this.hideLoading();\n                var $message = $1('<li role=\"alert\" aria-live=\"assertive\"' + ' class=\"select2-results__option\"></li>');\n                var message = this.options.get(\"translations\").get(params.message);\n                $message.append(escapeMarkup(message(params.args)));\n                $message[0].className += \" select2-results__message\";\n                this.$results.append($message);\n            };\n            Results.prototype.hideMessages = function() {\n                this.$results.find(\".select2-results__message\").remove();\n            };\n            Results.prototype.append = function(data) {\n                this.hideLoading();\n                var $options = [];\n                if (data.results == null || data.results.length === 0) {\n                    if (this.$results.children().length === 0) {\n                        this.trigger(\"results:message\", {\n                            message: \"noResults\"\n                        });\n                    }\n                    return;\n                }\n                data.results = this.sort(data.results);\n                for(var d = 0; d < data.results.length; d++){\n                    var item = data.results[d];\n                    var $option = this.option(item);\n                    $options.push($option);\n                }\n                this.$results.append($options);\n            };\n            Results.prototype.position = function($results, $dropdown) {\n                var $resultsContainer = $dropdown.find(\".select2-results\");\n                $resultsContainer.append($results);\n            };\n            Results.prototype.sort = function(data) {\n                var sorter = this.options.get(\"sorter\");\n                return sorter(data);\n            };\n            Results.prototype.highlightFirstItem = function() {\n                var $options = this.$results.find(\".select2-results__option--selectable\");\n                var $selected = $options.filter(\".select2-results__option--selected\");\n                // Check if there are any selected options\n                if ($selected.length > 0) {\n                    // If there are selected options, highlight the first\n                    $selected.first().trigger(\"mouseenter\");\n                } else {\n                    // If there are no selected options, highlight the first option\n                    // in the dropdown\n                    $options.first().trigger(\"mouseenter\");\n                }\n                this.ensureHighlightVisible();\n            };\n            Results.prototype.setClasses = function() {\n                var self = this;\n                this.data.current(function(selected) {\n                    var selectedIds = selected.map(function(s) {\n                        return s.id.toString();\n                    });\n                    var $options = self.$results.find(\".select2-results__option--selectable\");\n                    $options.each(function() {\n                        var $option = $1(this);\n                        var item = Utils.GetData(this, \"data\");\n                        // id needs to be converted to a string when comparing\n                        var id = \"\" + item.id;\n                        if (item.element != null && item.element.selected || item.element == null && selectedIds.indexOf(id) > -1) {\n                            this.classList.add(\"select2-results__option--selected\");\n                            $option.attr(\"aria-selected\", \"true\");\n                        } else {\n                            this.classList.remove(\"select2-results__option--selected\");\n                            $option.attr(\"aria-selected\", \"false\");\n                        }\n                    });\n                });\n            };\n            Results.prototype.showLoading = function(params) {\n                this.hideLoading();\n                var loadingMore = this.options.get(\"translations\").get(\"searching\");\n                var loading = {\n                    disabled: true,\n                    loading: true,\n                    text: loadingMore(params)\n                };\n                var $loading = this.option(loading);\n                $loading.className += \" loading-results\";\n                this.$results.prepend($loading);\n            };\n            Results.prototype.hideLoading = function() {\n                this.$results.find(\".loading-results\").remove();\n            };\n            Results.prototype.option = function(data) {\n                var option = document.createElement(\"li\");\n                option.classList.add(\"select2-results__option\");\n                option.classList.add(\"select2-results__option--selectable\");\n                var attrs = {\n                    \"role\": \"option\"\n                };\n                var matches = window.Element.prototype.matches || window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector;\n                if (data.element != null && matches.call(data.element, \":disabled\") || data.element == null && data.disabled) {\n                    attrs[\"aria-disabled\"] = \"true\";\n                    option.classList.remove(\"select2-results__option--selectable\");\n                    option.classList.add(\"select2-results__option--disabled\");\n                }\n                if (data.id == null) {\n                    option.classList.remove(\"select2-results__option--selectable\");\n                }\n                if (data._resultId != null) {\n                    option.id = data._resultId;\n                }\n                if (data.title) {\n                    option.title = data.title;\n                }\n                if (data.children) {\n                    attrs.role = \"group\";\n                    attrs[\"aria-label\"] = data.text;\n                    option.classList.remove(\"select2-results__option--selectable\");\n                    option.classList.add(\"select2-results__option--group\");\n                }\n                for(var attr in attrs){\n                    var val = attrs[attr];\n                    option.setAttribute(attr, val);\n                }\n                if (data.children) {\n                    var $option = $1(option);\n                    var label = document.createElement(\"strong\");\n                    label.className = \"select2-results__group\";\n                    this.template(data, label);\n                    var $children = [];\n                    for(var c = 0; c < data.children.length; c++){\n                        var child = data.children[c];\n                        var $child = this.option(child);\n                        $children.push($child);\n                    }\n                    var $childrenContainer = $1(\"<ul></ul>\", {\n                        \"class\": \"select2-results__options select2-results__options--nested\",\n                        \"role\": \"none\"\n                    });\n                    $childrenContainer.append($children);\n                    $option.append(label);\n                    $option.append($childrenContainer);\n                } else {\n                    this.template(data, option);\n                }\n                Utils.StoreData(option, \"data\", data);\n                return option;\n            };\n            Results.prototype.bind = function(container, $container) {\n                var self = this;\n                var id = container.id + \"-results\";\n                this.$results.attr(\"id\", id);\n                container.on(\"results:all\", function(params) {\n                    self.clear();\n                    self.append(params.data);\n                    if (container.isOpen()) {\n                        self.setClasses();\n                        self.highlightFirstItem();\n                    }\n                });\n                container.on(\"results:append\", function(params) {\n                    self.append(params.data);\n                    if (container.isOpen()) {\n                        self.setClasses();\n                    }\n                });\n                container.on(\"query\", function(params) {\n                    self.hideMessages();\n                    self.showLoading(params);\n                });\n                container.on(\"select\", function() {\n                    if (!container.isOpen()) {\n                        return;\n                    }\n                    self.setClasses();\n                    if (self.options.get(\"scrollAfterSelect\")) {\n                        self.highlightFirstItem();\n                    }\n                });\n                container.on(\"unselect\", function() {\n                    if (!container.isOpen()) {\n                        return;\n                    }\n                    self.setClasses();\n                    if (self.options.get(\"scrollAfterSelect\")) {\n                        self.highlightFirstItem();\n                    }\n                });\n                container.on(\"open\", function() {\n                    // When the dropdown is open, aria-expended=\"true\"\n                    self.$results.attr(\"aria-expanded\", \"true\");\n                    self.$results.attr(\"aria-hidden\", \"false\");\n                    self.setClasses();\n                    self.ensureHighlightVisible();\n                });\n                container.on(\"close\", function() {\n                    // When the dropdown is closed, aria-expended=\"false\"\n                    self.$results.attr(\"aria-expanded\", \"false\");\n                    self.$results.attr(\"aria-hidden\", \"true\");\n                    self.$results.removeAttr(\"aria-activedescendant\");\n                });\n                container.on(\"results:toggle\", function() {\n                    var $highlighted = self.getHighlightedResults();\n                    if ($highlighted.length === 0) {\n                        return;\n                    }\n                    $highlighted.trigger(\"mouseup\");\n                });\n                container.on(\"results:select\", function() {\n                    var $highlighted = self.getHighlightedResults();\n                    if ($highlighted.length === 0) {\n                        return;\n                    }\n                    var data = Utils.GetData($highlighted[0], \"data\");\n                    if ($highlighted.hasClass(\"select2-results__option--selected\")) {\n                        self.trigger(\"close\", {});\n                    } else {\n                        self.trigger(\"select\", {\n                            data: data\n                        });\n                    }\n                });\n                container.on(\"results:previous\", function() {\n                    var $highlighted = self.getHighlightedResults();\n                    var $options = self.$results.find(\".select2-results__option--selectable\");\n                    var currentIndex = $options.index($highlighted);\n                    // If we are already at the top, don't move further\n                    // If no options, currentIndex will be -1\n                    if (currentIndex <= 0) {\n                        return;\n                    }\n                    var nextIndex = currentIndex - 1;\n                    // If none are highlighted, highlight the first\n                    if ($highlighted.length === 0) {\n                        nextIndex = 0;\n                    }\n                    var $next = $options.eq(nextIndex);\n                    $next.trigger(\"mouseenter\");\n                    var currentOffset = self.$results.offset().top;\n                    var nextTop = $next.offset().top;\n                    var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);\n                    if (nextIndex === 0) {\n                        self.$results.scrollTop(0);\n                    } else if (nextTop - currentOffset < 0) {\n                        self.$results.scrollTop(nextOffset);\n                    }\n                });\n                container.on(\"results:next\", function() {\n                    var $highlighted = self.getHighlightedResults();\n                    var $options = self.$results.find(\".select2-results__option--selectable\");\n                    var currentIndex = $options.index($highlighted);\n                    var nextIndex = currentIndex + 1;\n                    // If we are at the last option, stay there\n                    if (nextIndex >= $options.length) {\n                        return;\n                    }\n                    var $next = $options.eq(nextIndex);\n                    $next.trigger(\"mouseenter\");\n                    var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);\n                    var nextBottom = $next.offset().top + $next.outerHeight(false);\n                    var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;\n                    if (nextIndex === 0) {\n                        self.$results.scrollTop(0);\n                    } else if (nextBottom > currentOffset) {\n                        self.$results.scrollTop(nextOffset);\n                    }\n                });\n                container.on(\"results:focus\", function(params) {\n                    params.element[0].classList.add(\"select2-results__option--highlighted\");\n                    params.element[0].setAttribute(\"aria-selected\", \"true\");\n                });\n                container.on(\"results:message\", function(params) {\n                    self.displayMessage(params);\n                });\n                if ($1.fn.mousewheel) {\n                    this.$results.on(\"mousewheel\", function(e) {\n                        var top = self.$results.scrollTop();\n                        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;\n                        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;\n                        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();\n                        if (isAtTop) {\n                            self.$results.scrollTop(0);\n                            e.preventDefault();\n                            e.stopPropagation();\n                        } else if (isAtBottom) {\n                            self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());\n                            e.preventDefault();\n                            e.stopPropagation();\n                        }\n                    });\n                }\n                this.$results.on(\"mouseup\", \".select2-results__option--selectable\", function(evt) {\n                    var $this = $1(this);\n                    var data = Utils.GetData(this, \"data\");\n                    if ($this.hasClass(\"select2-results__option--selected\")) {\n                        if (self.options.get(\"multiple\")) {\n                            self.trigger(\"unselect\", {\n                                originalEvent: evt,\n                                data: data\n                            });\n                        } else {\n                            self.trigger(\"close\", {});\n                        }\n                        return;\n                    }\n                    self.trigger(\"select\", {\n                        originalEvent: evt,\n                        data: data\n                    });\n                });\n                this.$results.on(\"mouseenter\", \".select2-results__option--selectable\", function(evt) {\n                    var data = Utils.GetData(this, \"data\");\n                    self.getHighlightedResults().removeClass(\"select2-results__option--highlighted\").attr(\"aria-selected\", \"false\");\n                    self.trigger(\"results:focus\", {\n                        data: data,\n                        element: $1(this)\n                    });\n                });\n            };\n            Results.prototype.getHighlightedResults = function() {\n                var $highlighted = this.$results.find(\".select2-results__option--highlighted\");\n                return $highlighted;\n            };\n            Results.prototype.destroy = function() {\n                this.$results.remove();\n            };\n            Results.prototype.ensureHighlightVisible = function() {\n                var $highlighted = this.getHighlightedResults();\n                if ($highlighted.length === 0) {\n                    return;\n                }\n                var $options = this.$results.find(\".select2-results__option--selectable\");\n                var currentIndex = $options.index($highlighted);\n                var currentOffset = this.$results.offset().top;\n                var nextTop = $highlighted.offset().top;\n                var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);\n                var offsetDelta = nextTop - currentOffset;\n                nextOffset -= $highlighted.outerHeight(false) * 2;\n                if (currentIndex <= 2) {\n                    this.$results.scrollTop(0);\n                } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {\n                    this.$results.scrollTop(nextOffset);\n                }\n            };\n            Results.prototype.template = function(result, container) {\n                var template = this.options.get(\"templateResult\");\n                var escapeMarkup = this.options.get(\"escapeMarkup\");\n                var content = template(result, container);\n                if (content == null) {\n                    container.style.display = \"none\";\n                } else if (typeof content === \"string\") {\n                    container.innerHTML = escapeMarkup(content);\n                } else {\n                    $1(container).append(content);\n                }\n            };\n            return Results;\n        });\n        S2.define(\"select2/keys\", [], function() {\n            var KEYS = {\n                BACKSPACE: 8,\n                TAB: 9,\n                ENTER: 13,\n                SHIFT: 16,\n                CTRL: 17,\n                ALT: 18,\n                ESC: 27,\n                SPACE: 32,\n                PAGE_UP: 33,\n                PAGE_DOWN: 34,\n                END: 35,\n                HOME: 36,\n                LEFT: 37,\n                UP: 38,\n                RIGHT: 39,\n                DOWN: 40,\n                DELETE: 46\n            };\n            return KEYS;\n        });\n        S2.define(\"select2/selection/base\", [\n            \"jquery\",\n            \"../utils\",\n            \"../keys\"\n        ], function($1, Utils, KEYS) {\n            function BaseSelection($element, options) {\n                this.$element = $element;\n                this.options = options;\n                BaseSelection.__super__.constructor.call(this);\n            }\n            Utils.Extend(BaseSelection, Utils.Observable);\n            BaseSelection.prototype.render = function() {\n                var $selection = $1('<span class=\"select2-selection\" role=\"combobox\" ' + ' aria-haspopup=\"true\" aria-expanded=\"false\">' + \"</span>\");\n                this._tabindex = 0;\n                if (Utils.GetData(this.$element[0], \"old-tabindex\") != null) {\n                    this._tabindex = Utils.GetData(this.$element[0], \"old-tabindex\");\n                } else if (this.$element.attr(\"tabindex\") != null) {\n                    this._tabindex = this.$element.attr(\"tabindex\");\n                }\n                $selection.attr(\"title\", this.$element.attr(\"title\"));\n                $selection.attr(\"tabindex\", this._tabindex);\n                $selection.attr(\"aria-disabled\", \"false\");\n                this.$selection = $selection;\n                return $selection;\n            };\n            BaseSelection.prototype.bind = function(container, $container) {\n                var self = this;\n                var resultsId = container.id + \"-results\";\n                this.container = container;\n                this.$selection.on(\"focus\", function(evt) {\n                    self.trigger(\"focus\", evt);\n                });\n                this.$selection.on(\"blur\", function(evt) {\n                    self._handleBlur(evt);\n                });\n                this.$selection.on(\"keydown\", function(evt) {\n                    self.trigger(\"keypress\", evt);\n                    if (evt.which === KEYS.SPACE) {\n                        evt.preventDefault();\n                    }\n                });\n                container.on(\"results:focus\", function(params) {\n                    self.$selection.attr(\"aria-activedescendant\", params.data._resultId);\n                });\n                container.on(\"selection:update\", function(params) {\n                    self.update(params.data);\n                });\n                container.on(\"open\", function() {\n                    // When the dropdown is open, aria-expanded=\"true\"\n                    self.$selection.attr(\"aria-expanded\", \"true\");\n                    self.$selection.attr(\"aria-owns\", resultsId);\n                    self._attachCloseHandler(container);\n                });\n                container.on(\"close\", function() {\n                    // When the dropdown is closed, aria-expanded=\"false\"\n                    self.$selection.attr(\"aria-expanded\", \"false\");\n                    self.$selection.removeAttr(\"aria-activedescendant\");\n                    self.$selection.removeAttr(\"aria-owns\");\n                    self.$selection.trigger(\"focus\");\n                    self._detachCloseHandler(container);\n                });\n                container.on(\"enable\", function() {\n                    self.$selection.attr(\"tabindex\", self._tabindex);\n                    self.$selection.attr(\"aria-disabled\", \"false\");\n                });\n                container.on(\"disable\", function() {\n                    self.$selection.attr(\"tabindex\", \"-1\");\n                    self.$selection.attr(\"aria-disabled\", \"true\");\n                });\n            };\n            BaseSelection.prototype._handleBlur = function(evt) {\n                var self = this;\n                // This needs to be delayed as the active element is the body when the tab\n                // key is pressed, possibly along with others.\n                window.setTimeout(function() {\n                    // Don't trigger `blur` if the focus is still in the selection\n                    if (document.activeElement == self.$selection[0] || $1.contains(self.$selection[0], document.activeElement)) {\n                        return;\n                    }\n                    self.trigger(\"blur\", evt);\n                }, 1);\n            };\n            BaseSelection.prototype._attachCloseHandler = function(container) {\n                $1(document.body).on(\"mousedown.select2.\" + container.id, function(e) {\n                    var $target = $1(e.target);\n                    var $select = $target.closest(\".select2\");\n                    var $all = $1(\".select2.select2-container--open\");\n                    $all.each(function() {\n                        if (this == $select[0]) {\n                            return;\n                        }\n                        var $element = Utils.GetData(this, \"element\");\n                        $element.select2(\"close\");\n                    });\n                });\n            };\n            BaseSelection.prototype._detachCloseHandler = function(container) {\n                $1(document.body).off(\"mousedown.select2.\" + container.id);\n            };\n            BaseSelection.prototype.position = function($selection, $container) {\n                var $selectionContainer = $container.find(\".selection\");\n                $selectionContainer.append($selection);\n            };\n            BaseSelection.prototype.destroy = function() {\n                this._detachCloseHandler(this.container);\n            };\n            BaseSelection.prototype.update = function(data) {\n                throw new Error(\"The `update` method must be defined in child classes.\");\n            };\n            /**\n   * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\n   * object.\n   *\n   * @return {true} if the instance is not disabled.\n   * @return {false} if the instance is disabled.\n   */ BaseSelection.prototype.isEnabled = function() {\n                return !this.isDisabled();\n            };\n            /**\n   * Helper method to abstract the \"disabled\" state of this object.\n   *\n   * @return {true} if the disabled option is true.\n   * @return {false} if the disabled option is false.\n   */ BaseSelection.prototype.isDisabled = function() {\n                return this.options.get(\"disabled\");\n            };\n            return BaseSelection;\n        });\n        S2.define(\"select2/selection/single\", [\n            \"jquery\",\n            \"./base\",\n            \"../utils\",\n            \"../keys\"\n        ], function($1, BaseSelection, Utils, KEYS) {\n            function SingleSelection() {\n                SingleSelection.__super__.constructor.apply(this, arguments);\n            }\n            Utils.Extend(SingleSelection, BaseSelection);\n            SingleSelection.prototype.render = function() {\n                var $selection = SingleSelection.__super__.render.call(this);\n                $selection[0].classList.add(\"select2-selection--single\");\n                $selection.html('<span class=\"select2-selection__rendered\"></span>' + '<span class=\"select2-selection__arrow\" role=\"presentation\">' + '<b role=\"presentation\"></b>' + \"</span>\");\n                return $selection;\n            };\n            SingleSelection.prototype.bind = function(container, $container) {\n                var self = this;\n                SingleSelection.__super__.bind.apply(this, arguments);\n                var id = container.id + \"-container\";\n                this.$selection.find(\".select2-selection__rendered\").attr(\"id\", id).attr(\"role\", \"textbox\").attr(\"aria-readonly\", \"true\");\n                this.$selection.attr(\"aria-labelledby\", id);\n                this.$selection.attr(\"aria-controls\", id);\n                this.$selection.on(\"mousedown\", function(evt) {\n                    // Only respond to left clicks\n                    if (evt.which !== 1) {\n                        return;\n                    }\n                    self.trigger(\"toggle\", {\n                        originalEvent: evt\n                    });\n                });\n                this.$selection.on(\"focus\", function(evt) {\n                // User focuses on the container\n                });\n                this.$selection.on(\"blur\", function(evt) {\n                // User exits the container\n                });\n                container.on(\"focus\", function(evt) {\n                    if (!container.isOpen()) {\n                        self.$selection.trigger(\"focus\");\n                    }\n                });\n            };\n            SingleSelection.prototype.clear = function() {\n                var $rendered = this.$selection.find(\".select2-selection__rendered\");\n                $rendered.empty();\n                $rendered.removeAttr(\"title\"); // clear tooltip on empty\n            };\n            SingleSelection.prototype.display = function(data, container) {\n                var template = this.options.get(\"templateSelection\");\n                var escapeMarkup = this.options.get(\"escapeMarkup\");\n                return escapeMarkup(template(data, container));\n            };\n            SingleSelection.prototype.selectionContainer = function() {\n                return $1(\"<span></span>\");\n            };\n            SingleSelection.prototype.update = function(data) {\n                if (data.length === 0) {\n                    this.clear();\n                    return;\n                }\n                var selection = data[0];\n                var $rendered = this.$selection.find(\".select2-selection__rendered\");\n                var formatted = this.display(selection, $rendered);\n                $rendered.empty().append(formatted);\n                var title = selection.title || selection.text;\n                if (title) {\n                    $rendered.attr(\"title\", title);\n                } else {\n                    $rendered.removeAttr(\"title\");\n                }\n            };\n            return SingleSelection;\n        });\n        S2.define(\"select2/selection/multiple\", [\n            \"jquery\",\n            \"./base\",\n            \"../utils\"\n        ], function($1, BaseSelection, Utils) {\n            function MultipleSelection($element, options) {\n                MultipleSelection.__super__.constructor.apply(this, arguments);\n            }\n            Utils.Extend(MultipleSelection, BaseSelection);\n            MultipleSelection.prototype.render = function() {\n                var $selection = MultipleSelection.__super__.render.call(this);\n                $selection[0].classList.add(\"select2-selection--multiple\");\n                $selection.html('<ul class=\"select2-selection__rendered\"></ul>');\n                return $selection;\n            };\n            MultipleSelection.prototype.bind = function(container, $container) {\n                var self = this;\n                MultipleSelection.__super__.bind.apply(this, arguments);\n                var id = container.id + \"-container\";\n                this.$selection.find(\".select2-selection__rendered\").attr(\"id\", id);\n                this.$selection.on(\"click\", function(evt) {\n                    self.trigger(\"toggle\", {\n                        originalEvent: evt\n                    });\n                });\n                this.$selection.on(\"click\", \".select2-selection__choice__remove\", function(evt) {\n                    // Ignore the event if it is disabled\n                    if (self.isDisabled()) {\n                        return;\n                    }\n                    var $remove = $1(this);\n                    var $selection = $remove.parent();\n                    var data = Utils.GetData($selection[0], \"data\");\n                    self.trigger(\"unselect\", {\n                        originalEvent: evt,\n                        data: data\n                    });\n                });\n                this.$selection.on(\"keydown\", \".select2-selection__choice__remove\", function(evt) {\n                    // Ignore the event if it is disabled\n                    if (self.isDisabled()) {\n                        return;\n                    }\n                    evt.stopPropagation();\n                });\n            };\n            MultipleSelection.prototype.clear = function() {\n                var $rendered = this.$selection.find(\".select2-selection__rendered\");\n                $rendered.empty();\n                $rendered.removeAttr(\"title\");\n            };\n            MultipleSelection.prototype.display = function(data, container) {\n                var template = this.options.get(\"templateSelection\");\n                var escapeMarkup = this.options.get(\"escapeMarkup\");\n                return escapeMarkup(template(data, container));\n            };\n            MultipleSelection.prototype.selectionContainer = function() {\n                var $container = $1('<li class=\"select2-selection__choice\">' + '<button type=\"button\" class=\"select2-selection__choice__remove\" ' + 'tabindex=\"-1\">' + '<span aria-hidden=\"true\">&times;</span>' + \"</button>\" + '<span class=\"select2-selection__choice__display\"></span>' + \"</li>\");\n                return $container;\n            };\n            MultipleSelection.prototype.update = function(data) {\n                this.clear();\n                if (data.length === 0) {\n                    return;\n                }\n                var $selections = [];\n                var selectionIdPrefix = this.$selection.find(\".select2-selection__rendered\").attr(\"id\") + \"-choice-\";\n                for(var d = 0; d < data.length; d++){\n                    var selection = data[d];\n                    var $selection = this.selectionContainer();\n                    var formatted = this.display(selection, $selection);\n                    var selectionId = selectionIdPrefix + Utils.generateChars(4) + \"-\";\n                    if (selection.id) {\n                        selectionId += selection.id;\n                    } else {\n                        selectionId += Utils.generateChars(4);\n                    }\n                    $selection.find(\".select2-selection__choice__display\").append(formatted).attr(\"id\", selectionId);\n                    var title = selection.title || selection.text;\n                    if (title) {\n                        $selection.attr(\"title\", title);\n                    }\n                    var removeItem = this.options.get(\"translations\").get(\"removeItem\");\n                    var $remove = $selection.find(\".select2-selection__choice__remove\");\n                    $remove.attr(\"title\", removeItem());\n                    $remove.attr(\"aria-label\", removeItem());\n                    $remove.attr(\"aria-describedby\", selectionId);\n                    Utils.StoreData($selection[0], \"data\", selection);\n                    $selections.push($selection);\n                }\n                var $rendered = this.$selection.find(\".select2-selection__rendered\");\n                $rendered.append($selections);\n            };\n            return MultipleSelection;\n        });\n        S2.define(\"select2/selection/placeholder\", [], function() {\n            function Placeholder(decorated, $element, options) {\n                this.placeholder = this.normalizePlaceholder(options.get(\"placeholder\"));\n                decorated.call(this, $element, options);\n            }\n            Placeholder.prototype.normalizePlaceholder = function(_, placeholder) {\n                if (typeof placeholder === \"string\") {\n                    placeholder = {\n                        id: \"\",\n                        text: placeholder\n                    };\n                }\n                return placeholder;\n            };\n            Placeholder.prototype.createPlaceholder = function(decorated, placeholder) {\n                var $placeholder = this.selectionContainer();\n                $placeholder.html(this.display(placeholder));\n                $placeholder[0].classList.add(\"select2-selection__placeholder\");\n                $placeholder[0].classList.remove(\"select2-selection__choice\");\n                var placeholderTitle = placeholder.title || placeholder.text || $placeholder.text();\n                this.$selection.find(\".select2-selection__rendered\").attr(\"title\", placeholderTitle);\n                return $placeholder;\n            };\n            Placeholder.prototype.update = function(decorated, data) {\n                var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;\n                var multipleSelections = data.length > 1;\n                if (multipleSelections || singlePlaceholder) {\n                    return decorated.call(this, data);\n                }\n                this.clear();\n                var $placeholder = this.createPlaceholder(this.placeholder);\n                this.$selection.find(\".select2-selection__rendered\").append($placeholder);\n            };\n            return Placeholder;\n        });\n        S2.define(\"select2/selection/allowClear\", [\n            \"jquery\",\n            \"../keys\",\n            \"../utils\"\n        ], function($1, KEYS, Utils) {\n            function AllowClear() {}\n            AllowClear.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                if (this.placeholder == null) {\n                    if (this.options.get(\"debug\") && window.console && console.error) {\n                        console.error(\"Select2: The `allowClear` option should be used in combination \" + \"with the `placeholder` option.\");\n                    }\n                }\n                this.$selection.on(\"mousedown\", \".select2-selection__clear\", function(evt) {\n                    self._handleClear(evt);\n                });\n                container.on(\"keypress\", function(evt) {\n                    self._handleKeyboardClear(evt, container);\n                });\n            };\n            AllowClear.prototype._handleClear = function(_, evt) {\n                // Ignore the event if it is disabled\n                if (this.isDisabled()) {\n                    return;\n                }\n                var $clear = this.$selection.find(\".select2-selection__clear\");\n                // Ignore the event if nothing has been selected\n                if ($clear.length === 0) {\n                    return;\n                }\n                evt.stopPropagation();\n                var data = Utils.GetData($clear[0], \"data\");\n                var previousVal = this.$element.val();\n                this.$element.val(this.placeholder.id);\n                var unselectData = {\n                    data: data\n                };\n                this.trigger(\"clear\", unselectData);\n                if (unselectData.prevented) {\n                    this.$element.val(previousVal);\n                    return;\n                }\n                for(var d = 0; d < data.length; d++){\n                    unselectData = {\n                        data: data[d]\n                    };\n                    // Trigger the `unselect` event, so people can prevent it from being\n                    // cleared.\n                    this.trigger(\"unselect\", unselectData);\n                    // If the event was prevented, don't clear it out.\n                    if (unselectData.prevented) {\n                        this.$element.val(previousVal);\n                        return;\n                    }\n                }\n                this.$element.trigger(\"input\").trigger(\"change\");\n                this.trigger(\"toggle\", {});\n            };\n            AllowClear.prototype._handleKeyboardClear = function(_, evt, container) {\n                if (container.isOpen()) {\n                    return;\n                }\n                if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {\n                    this._handleClear(evt);\n                }\n            };\n            AllowClear.prototype.update = function(decorated, data) {\n                decorated.call(this, data);\n                this.$selection.find(\".select2-selection__clear\").remove();\n                this.$selection[0].classList.remove(\"select2-selection--clearable\");\n                if (this.$selection.find(\".select2-selection__placeholder\").length > 0 || data.length === 0) {\n                    return;\n                }\n                var selectionId = this.$selection.find(\".select2-selection__rendered\").attr(\"id\");\n                var removeAll = this.options.get(\"translations\").get(\"removeAllItems\");\n                var $remove = $1('<button type=\"button\" class=\"select2-selection__clear\" tabindex=\"-1\">' + '<span aria-hidden=\"true\">&times;</span>' + \"</button>\");\n                $remove.attr(\"title\", removeAll());\n                $remove.attr(\"aria-label\", removeAll());\n                $remove.attr(\"aria-describedby\", selectionId);\n                Utils.StoreData($remove[0], \"data\", data);\n                this.$selection.prepend($remove);\n                this.$selection[0].classList.add(\"select2-selection--clearable\");\n            };\n            return AllowClear;\n        });\n        S2.define(\"select2/selection/search\", [\n            \"jquery\",\n            \"../utils\",\n            \"../keys\"\n        ], function($1, Utils, KEYS) {\n            function Search(decorated, $element, options) {\n                decorated.call(this, $element, options);\n            }\n            Search.prototype.render = function(decorated) {\n                var searchLabel = this.options.get(\"translations\").get(\"search\");\n                var $search = $1('<span class=\"select2-search select2-search--inline\">' + '<textarea class=\"select2-search__field\"' + ' type=\"search\" tabindex=\"-1\"' + ' autocorrect=\"off\" autocapitalize=\"none\"' + ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" >' + \"</textarea>\" + \"</span>\");\n                this.$searchContainer = $search;\n                this.$search = $search.find(\"textarea\");\n                this.$search.prop(\"autocomplete\", this.options.get(\"autocomplete\"));\n                this.$search.attr(\"aria-label\", searchLabel());\n                var $rendered = decorated.call(this);\n                this._transferTabIndex();\n                $rendered.append(this.$searchContainer);\n                return $rendered;\n            };\n            Search.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                var resultsId = container.id + \"-results\";\n                var selectionId = container.id + \"-container\";\n                decorated.call(this, container, $container);\n                self.$search.attr(\"aria-describedby\", selectionId);\n                container.on(\"open\", function() {\n                    self.$search.attr(\"aria-controls\", resultsId);\n                    self.$search.trigger(\"focus\");\n                });\n                container.on(\"close\", function() {\n                    self.$search.val(\"\");\n                    self.resizeSearch();\n                    self.$search.removeAttr(\"aria-controls\");\n                    self.$search.removeAttr(\"aria-activedescendant\");\n                    self.$search.trigger(\"focus\");\n                });\n                container.on(\"enable\", function() {\n                    self.$search.prop(\"disabled\", false);\n                    self._transferTabIndex();\n                });\n                container.on(\"disable\", function() {\n                    self.$search.prop(\"disabled\", true);\n                });\n                container.on(\"focus\", function(evt) {\n                    self.$search.trigger(\"focus\");\n                });\n                container.on(\"results:focus\", function(params) {\n                    if (params.data._resultId) {\n                        self.$search.attr(\"aria-activedescendant\", params.data._resultId);\n                    } else {\n                        self.$search.removeAttr(\"aria-activedescendant\");\n                    }\n                });\n                this.$selection.on(\"focusin\", \".select2-search--inline\", function(evt) {\n                    self.trigger(\"focus\", evt);\n                });\n                this.$selection.on(\"focusout\", \".select2-search--inline\", function(evt) {\n                    self._handleBlur(evt);\n                });\n                this.$selection.on(\"keydown\", \".select2-search--inline\", function(evt) {\n                    evt.stopPropagation();\n                    self.trigger(\"keypress\", evt);\n                    self._keyUpPrevented = evt.isDefaultPrevented();\n                    var key = evt.which;\n                    if (key === KEYS.BACKSPACE && self.$search.val() === \"\") {\n                        var $previousChoice = self.$selection.find(\".select2-selection__choice\").last();\n                        if ($previousChoice.length > 0) {\n                            var item = Utils.GetData($previousChoice[0], \"data\");\n                            self.searchRemoveChoice(item);\n                            evt.preventDefault();\n                        }\n                    }\n                });\n                this.$selection.on(\"click\", \".select2-search--inline\", function(evt) {\n                    if (self.$search.val()) {\n                        evt.stopPropagation();\n                    }\n                });\n                // Try to detect the IE version should the `documentMode` property that\n                // is stored on the document. This is only implemented in IE and is\n                // slightly cleaner than doing a user agent check.\n                // This property is not available in Edge, but Edge also doesn't have\n                // this bug.\n                var msie = document.documentMode;\n                var disableInputEvents = msie && msie <= 11;\n                // Workaround for browsers which do not support the `input` event\n                // This will prevent double-triggering of events for browsers which support\n                // both the `keyup` and `input` events.\n                this.$selection.on(\"input.searchcheck\", \".select2-search--inline\", function(evt) {\n                    // IE will trigger the `input` event when a placeholder is used on a\n                    // search box. To get around this issue, we are forced to ignore all\n                    // `input` events in IE and keep using `keyup`.\n                    if (disableInputEvents) {\n                        self.$selection.off(\"input.search input.searchcheck\");\n                        return;\n                    }\n                    // Unbind the duplicated `keyup` event\n                    self.$selection.off(\"keyup.search\");\n                });\n                this.$selection.on(\"keyup.search input.search\", \".select2-search--inline\", function(evt) {\n                    // IE will trigger the `input` event when a placeholder is used on a\n                    // search box. To get around this issue, we are forced to ignore all\n                    // `input` events in IE and keep using `keyup`.\n                    if (disableInputEvents && evt.type === \"input\") {\n                        self.$selection.off(\"input.search input.searchcheck\");\n                        return;\n                    }\n                    var key = evt.which;\n                    // We can freely ignore events from modifier keys\n                    if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {\n                        return;\n                    }\n                    // Tabbing will be handled during the `keydown` phase\n                    if (key == KEYS.TAB) {\n                        return;\n                    }\n                    self.handleSearch(evt);\n                });\n            };\n            /**\n   * This method will transfer the tabindex attribute from the rendered\n   * selection to the search box. This allows for the search box to be used as\n   * the primary focus instead of the selection container.\n   *\n   * @private\n   */ Search.prototype._transferTabIndex = function(decorated) {\n                this.$search.attr(\"tabindex\", this.$selection.attr(\"tabindex\"));\n                this.$selection.attr(\"tabindex\", \"-1\");\n            };\n            Search.prototype.createPlaceholder = function(decorated, placeholder) {\n                this.$search.attr(\"placeholder\", placeholder.text);\n            };\n            Search.prototype.update = function(decorated, data) {\n                var searchHadFocus = this.$search[0] == document.activeElement;\n                this.$search.attr(\"placeholder\", \"\");\n                decorated.call(this, data);\n                this.resizeSearch();\n                if (searchHadFocus) {\n                    this.$search.trigger(\"focus\");\n                }\n            };\n            Search.prototype.handleSearch = function() {\n                this.resizeSearch();\n                if (!this._keyUpPrevented) {\n                    var input = this.$search.val();\n                    this.trigger(\"query\", {\n                        term: input\n                    });\n                }\n                this._keyUpPrevented = false;\n            };\n            Search.prototype.searchRemoveChoice = function(decorated, item) {\n                this.trigger(\"unselect\", {\n                    data: item\n                });\n                this.$search.val(item.text);\n                this.handleSearch();\n            };\n            Search.prototype.resizeSearch = function() {\n                this.$search.css(\"width\", \"25px\");\n                var width = \"100%\";\n                if (this.$search.attr(\"placeholder\") === \"\") {\n                    var minimumWidth = this.$search.val().length + 1;\n                    width = minimumWidth * 0.75 + \"em\";\n                }\n                this.$search.css(\"width\", width);\n            };\n            return Search;\n        });\n        S2.define(\"select2/selection/selectionCss\", [\n            \"../utils\"\n        ], function(Utils) {\n            function SelectionCSS() {}\n            SelectionCSS.prototype.render = function(decorated) {\n                var $selection = decorated.call(this);\n                var selectionCssClass = this.options.get(\"selectionCssClass\") || \"\";\n                if (selectionCssClass.indexOf(\":all:\") !== -1) {\n                    selectionCssClass = selectionCssClass.replace(\":all:\", \"\");\n                    Utils.copyNonInternalCssClasses($selection[0], this.$element[0]);\n                }\n                $selection.addClass(selectionCssClass);\n                return $selection;\n            };\n            return SelectionCSS;\n        });\n        S2.define(\"select2/selection/eventRelay\", [\n            \"jquery\"\n        ], function($1) {\n            function EventRelay() {}\n            EventRelay.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                var relayEvents = [\n                    \"open\",\n                    \"opening\",\n                    \"close\",\n                    \"closing\",\n                    \"select\",\n                    \"selecting\",\n                    \"unselect\",\n                    \"unselecting\",\n                    \"clear\",\n                    \"clearing\"\n                ];\n                var preventableEvents = [\n                    \"opening\",\n                    \"closing\",\n                    \"selecting\",\n                    \"unselecting\",\n                    \"clearing\"\n                ];\n                decorated.call(this, container, $container);\n                container.on(\"*\", function(name, params) {\n                    // Ignore events that should not be relayed\n                    if (relayEvents.indexOf(name) === -1) {\n                        return;\n                    }\n                    // The parameters should always be an object\n                    params = params || {};\n                    // Generate the jQuery event for the Select2 event\n                    var evt = $1.Event(\"select2:\" + name, {\n                        params: params\n                    });\n                    self.$element.trigger(evt);\n                    // Only handle preventable events if it was one\n                    if (preventableEvents.indexOf(name) === -1) {\n                        return;\n                    }\n                    params.prevented = evt.isDefaultPrevented();\n                });\n            };\n            return EventRelay;\n        });\n        S2.define(\"select2/translation\", [\n            \"jquery\",\n            \"require\"\n        ], function($1, require1) {\n            function Translation(dict) {\n                this.dict = dict || {};\n            }\n            Translation.prototype.all = function() {\n                return this.dict;\n            };\n            Translation.prototype.get = function(key) {\n                return this.dict[key];\n            };\n            Translation.prototype.extend = function(translation) {\n                this.dict = $1.extend({}, translation.all(), this.dict);\n            };\n            // Static functions\n            Translation._cache = {};\n            Translation.loadPath = function(path) {\n                if (!(path in Translation._cache)) {\n                    var translations = require1(path);\n                    Translation._cache[path] = translations;\n                }\n                return new Translation(Translation._cache[path]);\n            };\n            return Translation;\n        });\n        S2.define(\"select2/diacritics\", [], function() {\n            var diacritics = {\n                \"Ⓐ\": \"A\",\n                \"Ａ\": \"A\",\n                \"\\xc0\": \"A\",\n                \"\\xc1\": \"A\",\n                \"\\xc2\": \"A\",\n                \"Ầ\": \"A\",\n                \"Ấ\": \"A\",\n                \"Ẫ\": \"A\",\n                \"Ẩ\": \"A\",\n                \"\\xc3\": \"A\",\n                \"Ā\": \"A\",\n                \"Ă\": \"A\",\n                \"Ằ\": \"A\",\n                \"Ắ\": \"A\",\n                \"Ẵ\": \"A\",\n                \"Ẳ\": \"A\",\n                \"Ȧ\": \"A\",\n                \"Ǡ\": \"A\",\n                \"\\xc4\": \"A\",\n                \"Ǟ\": \"A\",\n                \"Ả\": \"A\",\n                \"\\xc5\": \"A\",\n                \"Ǻ\": \"A\",\n                \"Ǎ\": \"A\",\n                \"Ȁ\": \"A\",\n                \"Ȃ\": \"A\",\n                \"Ạ\": \"A\",\n                \"Ậ\": \"A\",\n                \"Ặ\": \"A\",\n                \"Ḁ\": \"A\",\n                \"Ą\": \"A\",\n                \"Ⱥ\": \"A\",\n                \"Ɐ\": \"A\",\n                \"Ꜳ\": \"AA\",\n                \"\\xc6\": \"AE\",\n                \"Ǽ\": \"AE\",\n                \"Ǣ\": \"AE\",\n                \"Ꜵ\": \"AO\",\n                \"Ꜷ\": \"AU\",\n                \"Ꜹ\": \"AV\",\n                \"Ꜻ\": \"AV\",\n                \"Ꜽ\": \"AY\",\n                \"Ⓑ\": \"B\",\n                \"Ｂ\": \"B\",\n                \"Ḃ\": \"B\",\n                \"Ḅ\": \"B\",\n                \"Ḇ\": \"B\",\n                \"Ƀ\": \"B\",\n                \"Ƃ\": \"B\",\n                \"Ɓ\": \"B\",\n                \"Ⓒ\": \"C\",\n                \"Ｃ\": \"C\",\n                \"Ć\": \"C\",\n                \"Ĉ\": \"C\",\n                \"Ċ\": \"C\",\n                \"Č\": \"C\",\n                \"\\xc7\": \"C\",\n                \"Ḉ\": \"C\",\n                \"Ƈ\": \"C\",\n                \"Ȼ\": \"C\",\n                \"Ꜿ\": \"C\",\n                \"Ⓓ\": \"D\",\n                \"Ｄ\": \"D\",\n                \"Ḋ\": \"D\",\n                \"Ď\": \"D\",\n                \"Ḍ\": \"D\",\n                \"Ḑ\": \"D\",\n                \"Ḓ\": \"D\",\n                \"Ḏ\": \"D\",\n                \"Đ\": \"D\",\n                \"Ƌ\": \"D\",\n                \"Ɗ\": \"D\",\n                \"Ɖ\": \"D\",\n                \"Ꝺ\": \"D\",\n                \"Ǳ\": \"DZ\",\n                \"Ǆ\": \"DZ\",\n                \"ǲ\": \"Dz\",\n                \"ǅ\": \"Dz\",\n                \"Ⓔ\": \"E\",\n                \"Ｅ\": \"E\",\n                \"\\xc8\": \"E\",\n                \"\\xc9\": \"E\",\n                \"\\xca\": \"E\",\n                \"Ề\": \"E\",\n                \"Ế\": \"E\",\n                \"Ễ\": \"E\",\n                \"Ể\": \"E\",\n                \"Ẽ\": \"E\",\n                \"Ē\": \"E\",\n                \"Ḕ\": \"E\",\n                \"Ḗ\": \"E\",\n                \"Ĕ\": \"E\",\n                \"Ė\": \"E\",\n                \"\\xcb\": \"E\",\n                \"Ẻ\": \"E\",\n                \"Ě\": \"E\",\n                \"Ȅ\": \"E\",\n                \"Ȇ\": \"E\",\n                \"Ẹ\": \"E\",\n                \"Ệ\": \"E\",\n                \"Ȩ\": \"E\",\n                \"Ḝ\": \"E\",\n                \"Ę\": \"E\",\n                \"Ḙ\": \"E\",\n                \"Ḛ\": \"E\",\n                \"Ɛ\": \"E\",\n                \"Ǝ\": \"E\",\n                \"Ⓕ\": \"F\",\n                \"Ｆ\": \"F\",\n                \"Ḟ\": \"F\",\n                \"Ƒ\": \"F\",\n                \"Ꝼ\": \"F\",\n                \"Ⓖ\": \"G\",\n                \"Ｇ\": \"G\",\n                \"Ǵ\": \"G\",\n                \"Ĝ\": \"G\",\n                \"Ḡ\": \"G\",\n                \"Ğ\": \"G\",\n                \"Ġ\": \"G\",\n                \"Ǧ\": \"G\",\n                \"Ģ\": \"G\",\n                \"Ǥ\": \"G\",\n                \"Ɠ\": \"G\",\n                \"Ꞡ\": \"G\",\n                \"Ᵹ\": \"G\",\n                \"Ꝿ\": \"G\",\n                \"Ⓗ\": \"H\",\n                \"Ｈ\": \"H\",\n                \"Ĥ\": \"H\",\n                \"Ḣ\": \"H\",\n                \"Ḧ\": \"H\",\n                \"Ȟ\": \"H\",\n                \"Ḥ\": \"H\",\n                \"Ḩ\": \"H\",\n                \"Ḫ\": \"H\",\n                \"Ħ\": \"H\",\n                \"Ⱨ\": \"H\",\n                \"Ⱶ\": \"H\",\n                \"Ɥ\": \"H\",\n                \"Ⓘ\": \"I\",\n                \"Ｉ\": \"I\",\n                \"\\xcc\": \"I\",\n                \"\\xcd\": \"I\",\n                \"\\xce\": \"I\",\n                \"Ĩ\": \"I\",\n                \"Ī\": \"I\",\n                \"Ĭ\": \"I\",\n                \"İ\": \"I\",\n                \"\\xcf\": \"I\",\n                \"Ḯ\": \"I\",\n                \"Ỉ\": \"I\",\n                \"Ǐ\": \"I\",\n                \"Ȉ\": \"I\",\n                \"Ȋ\": \"I\",\n                \"Ị\": \"I\",\n                \"Į\": \"I\",\n                \"Ḭ\": \"I\",\n                \"Ɨ\": \"I\",\n                \"Ⓙ\": \"J\",\n                \"Ｊ\": \"J\",\n                \"Ĵ\": \"J\",\n                \"Ɉ\": \"J\",\n                \"Ⓚ\": \"K\",\n                \"Ｋ\": \"K\",\n                \"Ḱ\": \"K\",\n                \"Ǩ\": \"K\",\n                \"Ḳ\": \"K\",\n                \"Ķ\": \"K\",\n                \"Ḵ\": \"K\",\n                \"Ƙ\": \"K\",\n                \"Ⱪ\": \"K\",\n                \"Ꝁ\": \"K\",\n                \"Ꝃ\": \"K\",\n                \"Ꝅ\": \"K\",\n                \"Ꞣ\": \"K\",\n                \"Ⓛ\": \"L\",\n                \"Ｌ\": \"L\",\n                \"Ŀ\": \"L\",\n                \"Ĺ\": \"L\",\n                \"Ľ\": \"L\",\n                \"Ḷ\": \"L\",\n                \"Ḹ\": \"L\",\n                \"Ļ\": \"L\",\n                \"Ḽ\": \"L\",\n                \"Ḻ\": \"L\",\n                \"Ł\": \"L\",\n                \"Ƚ\": \"L\",\n                \"Ɫ\": \"L\",\n                \"Ⱡ\": \"L\",\n                \"Ꝉ\": \"L\",\n                \"Ꝇ\": \"L\",\n                \"Ꞁ\": \"L\",\n                \"Ǉ\": \"LJ\",\n                \"ǈ\": \"Lj\",\n                \"Ⓜ\": \"M\",\n                \"Ｍ\": \"M\",\n                \"Ḿ\": \"M\",\n                \"Ṁ\": \"M\",\n                \"Ṃ\": \"M\",\n                \"Ɱ\": \"M\",\n                \"Ɯ\": \"M\",\n                \"Ⓝ\": \"N\",\n                \"Ｎ\": \"N\",\n                \"Ǹ\": \"N\",\n                \"Ń\": \"N\",\n                \"\\xd1\": \"N\",\n                \"Ṅ\": \"N\",\n                \"Ň\": \"N\",\n                \"Ṇ\": \"N\",\n                \"Ņ\": \"N\",\n                \"Ṋ\": \"N\",\n                \"Ṉ\": \"N\",\n                \"Ƞ\": \"N\",\n                \"Ɲ\": \"N\",\n                \"Ꞑ\": \"N\",\n                \"Ꞥ\": \"N\",\n                \"Ǌ\": \"NJ\",\n                \"ǋ\": \"Nj\",\n                \"Ⓞ\": \"O\",\n                \"Ｏ\": \"O\",\n                \"\\xd2\": \"O\",\n                \"\\xd3\": \"O\",\n                \"\\xd4\": \"O\",\n                \"Ồ\": \"O\",\n                \"Ố\": \"O\",\n                \"Ỗ\": \"O\",\n                \"Ổ\": \"O\",\n                \"\\xd5\": \"O\",\n                \"Ṍ\": \"O\",\n                \"Ȭ\": \"O\",\n                \"Ṏ\": \"O\",\n                \"Ō\": \"O\",\n                \"Ṑ\": \"O\",\n                \"Ṓ\": \"O\",\n                \"Ŏ\": \"O\",\n                \"Ȯ\": \"O\",\n                \"Ȱ\": \"O\",\n                \"\\xd6\": \"O\",\n                \"Ȫ\": \"O\",\n                \"Ỏ\": \"O\",\n                \"Ő\": \"O\",\n                \"Ǒ\": \"O\",\n                \"Ȍ\": \"O\",\n                \"Ȏ\": \"O\",\n                \"Ơ\": \"O\",\n                \"Ờ\": \"O\",\n                \"Ớ\": \"O\",\n                \"Ỡ\": \"O\",\n                \"Ở\": \"O\",\n                \"Ợ\": \"O\",\n                \"Ọ\": \"O\",\n                \"Ộ\": \"O\",\n                \"Ǫ\": \"O\",\n                \"Ǭ\": \"O\",\n                \"\\xd8\": \"O\",\n                \"Ǿ\": \"O\",\n                \"Ɔ\": \"O\",\n                \"Ɵ\": \"O\",\n                \"Ꝋ\": \"O\",\n                \"Ꝍ\": \"O\",\n                \"Œ\": \"OE\",\n                \"Ƣ\": \"OI\",\n                \"Ꝏ\": \"OO\",\n                \"Ȣ\": \"OU\",\n                \"Ⓟ\": \"P\",\n                \"Ｐ\": \"P\",\n                \"Ṕ\": \"P\",\n                \"Ṗ\": \"P\",\n                \"Ƥ\": \"P\",\n                \"Ᵽ\": \"P\",\n                \"Ꝑ\": \"P\",\n                \"Ꝓ\": \"P\",\n                \"Ꝕ\": \"P\",\n                \"Ⓠ\": \"Q\",\n                \"Ｑ\": \"Q\",\n                \"Ꝗ\": \"Q\",\n                \"Ꝙ\": \"Q\",\n                \"Ɋ\": \"Q\",\n                \"Ⓡ\": \"R\",\n                \"Ｒ\": \"R\",\n                \"Ŕ\": \"R\",\n                \"Ṙ\": \"R\",\n                \"Ř\": \"R\",\n                \"Ȑ\": \"R\",\n                \"Ȓ\": \"R\",\n                \"Ṛ\": \"R\",\n                \"Ṝ\": \"R\",\n                \"Ŗ\": \"R\",\n                \"Ṟ\": \"R\",\n                \"Ɍ\": \"R\",\n                \"Ɽ\": \"R\",\n                \"Ꝛ\": \"R\",\n                \"Ꞧ\": \"R\",\n                \"Ꞃ\": \"R\",\n                \"Ⓢ\": \"S\",\n                \"Ｓ\": \"S\",\n                \"ẞ\": \"S\",\n                \"Ś\": \"S\",\n                \"Ṥ\": \"S\",\n                \"Ŝ\": \"S\",\n                \"Ṡ\": \"S\",\n                \"Š\": \"S\",\n                \"Ṧ\": \"S\",\n                \"Ṣ\": \"S\",\n                \"Ṩ\": \"S\",\n                \"Ș\": \"S\",\n                \"Ş\": \"S\",\n                \"Ȿ\": \"S\",\n                \"Ꞩ\": \"S\",\n                \"Ꞅ\": \"S\",\n                \"Ⓣ\": \"T\",\n                \"Ｔ\": \"T\",\n                \"Ṫ\": \"T\",\n                \"Ť\": \"T\",\n                \"Ṭ\": \"T\",\n                \"Ț\": \"T\",\n                \"Ţ\": \"T\",\n                \"Ṱ\": \"T\",\n                \"Ṯ\": \"T\",\n                \"Ŧ\": \"T\",\n                \"Ƭ\": \"T\",\n                \"Ʈ\": \"T\",\n                \"Ⱦ\": \"T\",\n                \"Ꞇ\": \"T\",\n                \"Ꜩ\": \"TZ\",\n                \"Ⓤ\": \"U\",\n                \"Ｕ\": \"U\",\n                \"\\xd9\": \"U\",\n                \"\\xda\": \"U\",\n                \"\\xdb\": \"U\",\n                \"Ũ\": \"U\",\n                \"Ṹ\": \"U\",\n                \"Ū\": \"U\",\n                \"Ṻ\": \"U\",\n                \"Ŭ\": \"U\",\n                \"\\xdc\": \"U\",\n                \"Ǜ\": \"U\",\n                \"Ǘ\": \"U\",\n                \"Ǖ\": \"U\",\n                \"Ǚ\": \"U\",\n                \"Ủ\": \"U\",\n                \"Ů\": \"U\",\n                \"Ű\": \"U\",\n                \"Ǔ\": \"U\",\n                \"Ȕ\": \"U\",\n                \"Ȗ\": \"U\",\n                \"Ư\": \"U\",\n                \"Ừ\": \"U\",\n                \"Ứ\": \"U\",\n                \"Ữ\": \"U\",\n                \"Ử\": \"U\",\n                \"Ự\": \"U\",\n                \"Ụ\": \"U\",\n                \"Ṳ\": \"U\",\n                \"Ų\": \"U\",\n                \"Ṷ\": \"U\",\n                \"Ṵ\": \"U\",\n                \"Ʉ\": \"U\",\n                \"Ⓥ\": \"V\",\n                \"Ｖ\": \"V\",\n                \"Ṽ\": \"V\",\n                \"Ṿ\": \"V\",\n                \"Ʋ\": \"V\",\n                \"Ꝟ\": \"V\",\n                \"Ʌ\": \"V\",\n                \"Ꝡ\": \"VY\",\n                \"Ⓦ\": \"W\",\n                \"Ｗ\": \"W\",\n                \"Ẁ\": \"W\",\n                \"Ẃ\": \"W\",\n                \"Ŵ\": \"W\",\n                \"Ẇ\": \"W\",\n                \"Ẅ\": \"W\",\n                \"Ẉ\": \"W\",\n                \"Ⱳ\": \"W\",\n                \"Ⓧ\": \"X\",\n                \"Ｘ\": \"X\",\n                \"Ẋ\": \"X\",\n                \"Ẍ\": \"X\",\n                \"Ⓨ\": \"Y\",\n                \"Ｙ\": \"Y\",\n                \"Ỳ\": \"Y\",\n                \"\\xdd\": \"Y\",\n                \"Ŷ\": \"Y\",\n                \"Ỹ\": \"Y\",\n                \"Ȳ\": \"Y\",\n                \"Ẏ\": \"Y\",\n                \"Ÿ\": \"Y\",\n                \"Ỷ\": \"Y\",\n                \"Ỵ\": \"Y\",\n                \"Ƴ\": \"Y\",\n                \"Ɏ\": \"Y\",\n                \"Ỿ\": \"Y\",\n                \"Ⓩ\": \"Z\",\n                \"Ｚ\": \"Z\",\n                \"Ź\": \"Z\",\n                \"Ẑ\": \"Z\",\n                \"Ż\": \"Z\",\n                \"Ž\": \"Z\",\n                \"Ẓ\": \"Z\",\n                \"Ẕ\": \"Z\",\n                \"Ƶ\": \"Z\",\n                \"Ȥ\": \"Z\",\n                \"Ɀ\": \"Z\",\n                \"Ⱬ\": \"Z\",\n                \"Ꝣ\": \"Z\",\n                \"ⓐ\": \"a\",\n                \"ａ\": \"a\",\n                \"ẚ\": \"a\",\n                \"\\xe0\": \"a\",\n                \"\\xe1\": \"a\",\n                \"\\xe2\": \"a\",\n                \"ầ\": \"a\",\n                \"ấ\": \"a\",\n                \"ẫ\": \"a\",\n                \"ẩ\": \"a\",\n                \"\\xe3\": \"a\",\n                \"ā\": \"a\",\n                \"ă\": \"a\",\n                \"ằ\": \"a\",\n                \"ắ\": \"a\",\n                \"ẵ\": \"a\",\n                \"ẳ\": \"a\",\n                \"ȧ\": \"a\",\n                \"ǡ\": \"a\",\n                \"\\xe4\": \"a\",\n                \"ǟ\": \"a\",\n                \"ả\": \"a\",\n                \"\\xe5\": \"a\",\n                \"ǻ\": \"a\",\n                \"ǎ\": \"a\",\n                \"ȁ\": \"a\",\n                \"ȃ\": \"a\",\n                \"ạ\": \"a\",\n                \"ậ\": \"a\",\n                \"ặ\": \"a\",\n                \"ḁ\": \"a\",\n                \"ą\": \"a\",\n                \"ⱥ\": \"a\",\n                \"ɐ\": \"a\",\n                \"ꜳ\": \"aa\",\n                \"\\xe6\": \"ae\",\n                \"ǽ\": \"ae\",\n                \"ǣ\": \"ae\",\n                \"ꜵ\": \"ao\",\n                \"ꜷ\": \"au\",\n                \"ꜹ\": \"av\",\n                \"ꜻ\": \"av\",\n                \"ꜽ\": \"ay\",\n                \"ⓑ\": \"b\",\n                \"ｂ\": \"b\",\n                \"ḃ\": \"b\",\n                \"ḅ\": \"b\",\n                \"ḇ\": \"b\",\n                \"ƀ\": \"b\",\n                \"ƃ\": \"b\",\n                \"ɓ\": \"b\",\n                \"ⓒ\": \"c\",\n                \"ｃ\": \"c\",\n                \"ć\": \"c\",\n                \"ĉ\": \"c\",\n                \"ċ\": \"c\",\n                \"č\": \"c\",\n                \"\\xe7\": \"c\",\n                \"ḉ\": \"c\",\n                \"ƈ\": \"c\",\n                \"ȼ\": \"c\",\n                \"ꜿ\": \"c\",\n                \"ↄ\": \"c\",\n                \"ⓓ\": \"d\",\n                \"ｄ\": \"d\",\n                \"ḋ\": \"d\",\n                \"ď\": \"d\",\n                \"ḍ\": \"d\",\n                \"ḑ\": \"d\",\n                \"ḓ\": \"d\",\n                \"ḏ\": \"d\",\n                \"đ\": \"d\",\n                \"ƌ\": \"d\",\n                \"ɖ\": \"d\",\n                \"ɗ\": \"d\",\n                \"ꝺ\": \"d\",\n                \"ǳ\": \"dz\",\n                \"ǆ\": \"dz\",\n                \"ⓔ\": \"e\",\n                \"ｅ\": \"e\",\n                \"\\xe8\": \"e\",\n                \"\\xe9\": \"e\",\n                \"\\xea\": \"e\",\n                \"ề\": \"e\",\n                \"ế\": \"e\",\n                \"ễ\": \"e\",\n                \"ể\": \"e\",\n                \"ẽ\": \"e\",\n                \"ē\": \"e\",\n                \"ḕ\": \"e\",\n                \"ḗ\": \"e\",\n                \"ĕ\": \"e\",\n                \"ė\": \"e\",\n                \"\\xeb\": \"e\",\n                \"ẻ\": \"e\",\n                \"ě\": \"e\",\n                \"ȅ\": \"e\",\n                \"ȇ\": \"e\",\n                \"ẹ\": \"e\",\n                \"ệ\": \"e\",\n                \"ȩ\": \"e\",\n                \"ḝ\": \"e\",\n                \"ę\": \"e\",\n                \"ḙ\": \"e\",\n                \"ḛ\": \"e\",\n                \"ɇ\": \"e\",\n                \"ɛ\": \"e\",\n                \"ǝ\": \"e\",\n                \"ⓕ\": \"f\",\n                \"ｆ\": \"f\",\n                \"ḟ\": \"f\",\n                \"ƒ\": \"f\",\n                \"ꝼ\": \"f\",\n                \"ⓖ\": \"g\",\n                \"ｇ\": \"g\",\n                \"ǵ\": \"g\",\n                \"ĝ\": \"g\",\n                \"ḡ\": \"g\",\n                \"ğ\": \"g\",\n                \"ġ\": \"g\",\n                \"ǧ\": \"g\",\n                \"ģ\": \"g\",\n                \"ǥ\": \"g\",\n                \"ɠ\": \"g\",\n                \"ꞡ\": \"g\",\n                \"ᵹ\": \"g\",\n                \"ꝿ\": \"g\",\n                \"ⓗ\": \"h\",\n                \"ｈ\": \"h\",\n                \"ĥ\": \"h\",\n                \"ḣ\": \"h\",\n                \"ḧ\": \"h\",\n                \"ȟ\": \"h\",\n                \"ḥ\": \"h\",\n                \"ḩ\": \"h\",\n                \"ḫ\": \"h\",\n                \"ẖ\": \"h\",\n                \"ħ\": \"h\",\n                \"ⱨ\": \"h\",\n                \"ⱶ\": \"h\",\n                \"ɥ\": \"h\",\n                \"ƕ\": \"hv\",\n                \"ⓘ\": \"i\",\n                \"ｉ\": \"i\",\n                \"\\xec\": \"i\",\n                \"\\xed\": \"i\",\n                \"\\xee\": \"i\",\n                \"ĩ\": \"i\",\n                \"ī\": \"i\",\n                \"ĭ\": \"i\",\n                \"\\xef\": \"i\",\n                \"ḯ\": \"i\",\n                \"ỉ\": \"i\",\n                \"ǐ\": \"i\",\n                \"ȉ\": \"i\",\n                \"ȋ\": \"i\",\n                \"ị\": \"i\",\n                \"į\": \"i\",\n                \"ḭ\": \"i\",\n                \"ɨ\": \"i\",\n                \"ı\": \"i\",\n                \"ⓙ\": \"j\",\n                \"ｊ\": \"j\",\n                \"ĵ\": \"j\",\n                \"ǰ\": \"j\",\n                \"ɉ\": \"j\",\n                \"ⓚ\": \"k\",\n                \"ｋ\": \"k\",\n                \"ḱ\": \"k\",\n                \"ǩ\": \"k\",\n                \"ḳ\": \"k\",\n                \"ķ\": \"k\",\n                \"ḵ\": \"k\",\n                \"ƙ\": \"k\",\n                \"ⱪ\": \"k\",\n                \"ꝁ\": \"k\",\n                \"ꝃ\": \"k\",\n                \"ꝅ\": \"k\",\n                \"ꞣ\": \"k\",\n                \"ⓛ\": \"l\",\n                \"ｌ\": \"l\",\n                \"ŀ\": \"l\",\n                \"ĺ\": \"l\",\n                \"ľ\": \"l\",\n                \"ḷ\": \"l\",\n                \"ḹ\": \"l\",\n                \"ļ\": \"l\",\n                \"ḽ\": \"l\",\n                \"ḻ\": \"l\",\n                \"ſ\": \"l\",\n                \"ł\": \"l\",\n                \"ƚ\": \"l\",\n                \"ɫ\": \"l\",\n                \"ⱡ\": \"l\",\n                \"ꝉ\": \"l\",\n                \"ꞁ\": \"l\",\n                \"ꝇ\": \"l\",\n                \"ǉ\": \"lj\",\n                \"ⓜ\": \"m\",\n                \"ｍ\": \"m\",\n                \"ḿ\": \"m\",\n                \"ṁ\": \"m\",\n                \"ṃ\": \"m\",\n                \"ɱ\": \"m\",\n                \"ɯ\": \"m\",\n                \"ⓝ\": \"n\",\n                \"ｎ\": \"n\",\n                \"ǹ\": \"n\",\n                \"ń\": \"n\",\n                \"\\xf1\": \"n\",\n                \"ṅ\": \"n\",\n                \"ň\": \"n\",\n                \"ṇ\": \"n\",\n                \"ņ\": \"n\",\n                \"ṋ\": \"n\",\n                \"ṉ\": \"n\",\n                \"ƞ\": \"n\",\n                \"ɲ\": \"n\",\n                \"ŉ\": \"n\",\n                \"ꞑ\": \"n\",\n                \"ꞥ\": \"n\",\n                \"ǌ\": \"nj\",\n                \"ⓞ\": \"o\",\n                \"ｏ\": \"o\",\n                \"\\xf2\": \"o\",\n                \"\\xf3\": \"o\",\n                \"\\xf4\": \"o\",\n                \"ồ\": \"o\",\n                \"ố\": \"o\",\n                \"ỗ\": \"o\",\n                \"ổ\": \"o\",\n                \"\\xf5\": \"o\",\n                \"ṍ\": \"o\",\n                \"ȭ\": \"o\",\n                \"ṏ\": \"o\",\n                \"ō\": \"o\",\n                \"ṑ\": \"o\",\n                \"ṓ\": \"o\",\n                \"ŏ\": \"o\",\n                \"ȯ\": \"o\",\n                \"ȱ\": \"o\",\n                \"\\xf6\": \"o\",\n                \"ȫ\": \"o\",\n                \"ỏ\": \"o\",\n                \"ő\": \"o\",\n                \"ǒ\": \"o\",\n                \"ȍ\": \"o\",\n                \"ȏ\": \"o\",\n                \"ơ\": \"o\",\n                \"ờ\": \"o\",\n                \"ớ\": \"o\",\n                \"ỡ\": \"o\",\n                \"ở\": \"o\",\n                \"ợ\": \"o\",\n                \"ọ\": \"o\",\n                \"ộ\": \"o\",\n                \"ǫ\": \"o\",\n                \"ǭ\": \"o\",\n                \"\\xf8\": \"o\",\n                \"ǿ\": \"o\",\n                \"ɔ\": \"o\",\n                \"ꝋ\": \"o\",\n                \"ꝍ\": \"o\",\n                \"ɵ\": \"o\",\n                \"œ\": \"oe\",\n                \"ƣ\": \"oi\",\n                \"ȣ\": \"ou\",\n                \"ꝏ\": \"oo\",\n                \"ⓟ\": \"p\",\n                \"ｐ\": \"p\",\n                \"ṕ\": \"p\",\n                \"ṗ\": \"p\",\n                \"ƥ\": \"p\",\n                \"ᵽ\": \"p\",\n                \"ꝑ\": \"p\",\n                \"ꝓ\": \"p\",\n                \"ꝕ\": \"p\",\n                \"ⓠ\": \"q\",\n                \"ｑ\": \"q\",\n                \"ɋ\": \"q\",\n                \"ꝗ\": \"q\",\n                \"ꝙ\": \"q\",\n                \"ⓡ\": \"r\",\n                \"ｒ\": \"r\",\n                \"ŕ\": \"r\",\n                \"ṙ\": \"r\",\n                \"ř\": \"r\",\n                \"ȑ\": \"r\",\n                \"ȓ\": \"r\",\n                \"ṛ\": \"r\",\n                \"ṝ\": \"r\",\n                \"ŗ\": \"r\",\n                \"ṟ\": \"r\",\n                \"ɍ\": \"r\",\n                \"ɽ\": \"r\",\n                \"ꝛ\": \"r\",\n                \"ꞧ\": \"r\",\n                \"ꞃ\": \"r\",\n                \"ⓢ\": \"s\",\n                \"ｓ\": \"s\",\n                \"\\xdf\": \"s\",\n                \"ś\": \"s\",\n                \"ṥ\": \"s\",\n                \"ŝ\": \"s\",\n                \"ṡ\": \"s\",\n                \"š\": \"s\",\n                \"ṧ\": \"s\",\n                \"ṣ\": \"s\",\n                \"ṩ\": \"s\",\n                \"ș\": \"s\",\n                \"ş\": \"s\",\n                \"ȿ\": \"s\",\n                \"ꞩ\": \"s\",\n                \"ꞅ\": \"s\",\n                \"ẛ\": \"s\",\n                \"ⓣ\": \"t\",\n                \"ｔ\": \"t\",\n                \"ṫ\": \"t\",\n                \"ẗ\": \"t\",\n                \"ť\": \"t\",\n                \"ṭ\": \"t\",\n                \"ț\": \"t\",\n                \"ţ\": \"t\",\n                \"ṱ\": \"t\",\n                \"ṯ\": \"t\",\n                \"ŧ\": \"t\",\n                \"ƭ\": \"t\",\n                \"ʈ\": \"t\",\n                \"ⱦ\": \"t\",\n                \"ꞇ\": \"t\",\n                \"ꜩ\": \"tz\",\n                \"ⓤ\": \"u\",\n                \"ｕ\": \"u\",\n                \"\\xf9\": \"u\",\n                \"\\xfa\": \"u\",\n                \"\\xfb\": \"u\",\n                \"ũ\": \"u\",\n                \"ṹ\": \"u\",\n                \"ū\": \"u\",\n                \"ṻ\": \"u\",\n                \"ŭ\": \"u\",\n                \"\\xfc\": \"u\",\n                \"ǜ\": \"u\",\n                \"ǘ\": \"u\",\n                \"ǖ\": \"u\",\n                \"ǚ\": \"u\",\n                \"ủ\": \"u\",\n                \"ů\": \"u\",\n                \"ű\": \"u\",\n                \"ǔ\": \"u\",\n                \"ȕ\": \"u\",\n                \"ȗ\": \"u\",\n                \"ư\": \"u\",\n                \"ừ\": \"u\",\n                \"ứ\": \"u\",\n                \"ữ\": \"u\",\n                \"ử\": \"u\",\n                \"ự\": \"u\",\n                \"ụ\": \"u\",\n                \"ṳ\": \"u\",\n                \"ų\": \"u\",\n                \"ṷ\": \"u\",\n                \"ṵ\": \"u\",\n                \"ʉ\": \"u\",\n                \"ⓥ\": \"v\",\n                \"ｖ\": \"v\",\n                \"ṽ\": \"v\",\n                \"ṿ\": \"v\",\n                \"ʋ\": \"v\",\n                \"ꝟ\": \"v\",\n                \"ʌ\": \"v\",\n                \"ꝡ\": \"vy\",\n                \"ⓦ\": \"w\",\n                \"ｗ\": \"w\",\n                \"ẁ\": \"w\",\n                \"ẃ\": \"w\",\n                \"ŵ\": \"w\",\n                \"ẇ\": \"w\",\n                \"ẅ\": \"w\",\n                \"ẘ\": \"w\",\n                \"ẉ\": \"w\",\n                \"ⱳ\": \"w\",\n                \"ⓧ\": \"x\",\n                \"ｘ\": \"x\",\n                \"ẋ\": \"x\",\n                \"ẍ\": \"x\",\n                \"ⓨ\": \"y\",\n                \"ｙ\": \"y\",\n                \"ỳ\": \"y\",\n                \"\\xfd\": \"y\",\n                \"ŷ\": \"y\",\n                \"ỹ\": \"y\",\n                \"ȳ\": \"y\",\n                \"ẏ\": \"y\",\n                \"\\xff\": \"y\",\n                \"ỷ\": \"y\",\n                \"ẙ\": \"y\",\n                \"ỵ\": \"y\",\n                \"ƴ\": \"y\",\n                \"ɏ\": \"y\",\n                \"ỿ\": \"y\",\n                \"ⓩ\": \"z\",\n                \"ｚ\": \"z\",\n                \"ź\": \"z\",\n                \"ẑ\": \"z\",\n                \"ż\": \"z\",\n                \"ž\": \"z\",\n                \"ẓ\": \"z\",\n                \"ẕ\": \"z\",\n                \"ƶ\": \"z\",\n                \"ȥ\": \"z\",\n                \"ɀ\": \"z\",\n                \"ⱬ\": \"z\",\n                \"ꝣ\": \"z\",\n                \"Ά\": \"Α\",\n                \"Έ\": \"Ε\",\n                \"Ή\": \"Η\",\n                \"Ί\": \"Ι\",\n                \"Ϊ\": \"Ι\",\n                \"Ό\": \"Ο\",\n                \"Ύ\": \"Υ\",\n                \"Ϋ\": \"Υ\",\n                \"Ώ\": \"Ω\",\n                \"ά\": \"α\",\n                \"έ\": \"ε\",\n                \"ή\": \"η\",\n                \"ί\": \"ι\",\n                \"ϊ\": \"ι\",\n                \"ΐ\": \"ι\",\n                \"ό\": \"ο\",\n                \"ύ\": \"υ\",\n                \"ϋ\": \"υ\",\n                \"ΰ\": \"υ\",\n                \"ώ\": \"ω\",\n                \"ς\": \"σ\",\n                \"’\": \"'\"\n            };\n            return diacritics;\n        });\n        S2.define(\"select2/data/base\", [\n            \"../utils\"\n        ], function(Utils) {\n            function BaseAdapter($element, options) {\n                BaseAdapter.__super__.constructor.call(this);\n            }\n            Utils.Extend(BaseAdapter, Utils.Observable);\n            BaseAdapter.prototype.current = function(callback) {\n                throw new Error(\"The `current` method must be defined in child classes.\");\n            };\n            BaseAdapter.prototype.query = function(params, callback) {\n                throw new Error(\"The `query` method must be defined in child classes.\");\n            };\n            BaseAdapter.prototype.bind = function(container, $container) {\n            // Can be implemented in subclasses\n            };\n            BaseAdapter.prototype.destroy = function() {\n            // Can be implemented in subclasses\n            };\n            BaseAdapter.prototype.generateResultId = function(container, data) {\n                var id = container.id + \"-result-\";\n                id += Utils.generateChars(4);\n                if (data.id != null) {\n                    id += \"-\" + data.id.toString();\n                } else {\n                    id += \"-\" + Utils.generateChars(4);\n                }\n                return id;\n            };\n            return BaseAdapter;\n        });\n        S2.define(\"select2/data/select\", [\n            \"./base\",\n            \"../utils\",\n            \"jquery\"\n        ], function(BaseAdapter, Utils, $1) {\n            function SelectAdapter($element, options) {\n                this.$element = $element;\n                this.options = options;\n                SelectAdapter.__super__.constructor.call(this);\n            }\n            Utils.Extend(SelectAdapter, BaseAdapter);\n            SelectAdapter.prototype.current = function(callback) {\n                var self = this;\n                var data = Array.prototype.map.call(this.$element[0].querySelectorAll(\":checked\"), function(selectedElement) {\n                    return self.item($1(selectedElement));\n                });\n                callback(data);\n            };\n            SelectAdapter.prototype.select = function(data) {\n                var self = this;\n                data.selected = true;\n                // If data.element is a DOM node, use it instead\n                if (data.element != null && data.element.tagName.toLowerCase() === \"option\") {\n                    data.element.selected = true;\n                    this.$element.trigger(\"input\").trigger(\"change\");\n                    return;\n                }\n                if (this.$element.prop(\"multiple\")) {\n                    this.current(function(currentData) {\n                        var val = [];\n                        data = [\n                            data\n                        ];\n                        data.push.apply(data, currentData);\n                        for(var d = 0; d < data.length; d++){\n                            var id = data[d].id;\n                            if (val.indexOf(id) === -1) {\n                                val.push(id);\n                            }\n                        }\n                        self.$element.val(val);\n                        self.$element.trigger(\"input\").trigger(\"change\");\n                    });\n                } else {\n                    var val = data.id;\n                    this.$element.val(val);\n                    this.$element.trigger(\"input\").trigger(\"change\");\n                }\n            };\n            SelectAdapter.prototype.unselect = function(data) {\n                var self = this;\n                if (!this.$element.prop(\"multiple\")) {\n                    return;\n                }\n                data.selected = false;\n                if (data.element != null && data.element.tagName.toLowerCase() === \"option\") {\n                    data.element.selected = false;\n                    this.$element.trigger(\"input\").trigger(\"change\");\n                    return;\n                }\n                this.current(function(currentData) {\n                    var val = [];\n                    for(var d = 0; d < currentData.length; d++){\n                        var id = currentData[d].id;\n                        if (id !== data.id && val.indexOf(id) === -1) {\n                            val.push(id);\n                        }\n                    }\n                    self.$element.val(val);\n                    self.$element.trigger(\"input\").trigger(\"change\");\n                });\n            };\n            SelectAdapter.prototype.bind = function(container, $container) {\n                var self = this;\n                this.container = container;\n                container.on(\"select\", function(params) {\n                    self.select(params.data);\n                });\n                container.on(\"unselect\", function(params) {\n                    self.unselect(params.data);\n                });\n            };\n            SelectAdapter.prototype.destroy = function() {\n                // Remove anything added to child elements\n                this.$element.find(\"*\").each(function() {\n                    // Remove any custom data set by Select2\n                    Utils.RemoveData(this);\n                });\n            };\n            SelectAdapter.prototype.query = function(params, callback) {\n                var data = [];\n                var self = this;\n                var $options = this.$element.children();\n                $options.each(function() {\n                    if (this.tagName.toLowerCase() !== \"option\" && this.tagName.toLowerCase() !== \"optgroup\") {\n                        return;\n                    }\n                    var $option = $1(this);\n                    var option = self.item($option);\n                    var matches = self.matches(params, option);\n                    if (matches !== null) {\n                        data.push(matches);\n                    }\n                });\n                callback({\n                    results: data\n                });\n            };\n            SelectAdapter.prototype.addOptions = function($options) {\n                this.$element.append($options);\n            };\n            SelectAdapter.prototype.option = function(data) {\n                var option;\n                if (data.children) {\n                    option = document.createElement(\"optgroup\");\n                    option.label = data.text;\n                } else {\n                    option = document.createElement(\"option\");\n                    if (option.textContent !== undefined) {\n                        option.textContent = data.text;\n                    } else {\n                        option.innerText = data.text;\n                    }\n                }\n                if (data.id !== undefined) {\n                    option.value = data.id;\n                }\n                if (data.disabled) {\n                    option.disabled = true;\n                }\n                if (data.selected) {\n                    option.selected = true;\n                }\n                if (data.title) {\n                    option.title = data.title;\n                }\n                var normalizedData = this._normalizeItem(data);\n                normalizedData.element = option;\n                // Override the option's data with the combined data\n                Utils.StoreData(option, \"data\", normalizedData);\n                return $1(option);\n            };\n            SelectAdapter.prototype.item = function($option) {\n                var data = {};\n                data = Utils.GetData($option[0], \"data\");\n                if (data != null) {\n                    return data;\n                }\n                var option = $option[0];\n                if (option.tagName.toLowerCase() === \"option\") {\n                    data = {\n                        id: $option.val(),\n                        text: $option.text(),\n                        disabled: $option.prop(\"disabled\"),\n                        selected: $option.prop(\"selected\"),\n                        title: $option.prop(\"title\")\n                    };\n                } else if (option.tagName.toLowerCase() === \"optgroup\") {\n                    data = {\n                        text: $option.prop(\"label\"),\n                        children: [],\n                        title: $option.prop(\"title\")\n                    };\n                    var $children = $option.children(\"option\");\n                    var children = [];\n                    for(var c = 0; c < $children.length; c++){\n                        var $child = $1($children[c]);\n                        var child = this.item($child);\n                        children.push(child);\n                    }\n                    data.children = children;\n                }\n                data = this._normalizeItem(data);\n                data.element = $option[0];\n                Utils.StoreData($option[0], \"data\", data);\n                return data;\n            };\n            SelectAdapter.prototype._normalizeItem = function(item) {\n                if (item !== Object(item)) {\n                    item = {\n                        id: item,\n                        text: item\n                    };\n                }\n                item = $1.extend({}, {\n                    text: \"\"\n                }, item);\n                var defaults = {\n                    selected: false,\n                    disabled: false\n                };\n                if (item.id != null) {\n                    item.id = item.id.toString();\n                }\n                if (item.text != null) {\n                    item.text = item.text.toString();\n                }\n                if (item._resultId == null && item.id && this.container != null) {\n                    item._resultId = this.generateResultId(this.container, item);\n                }\n                return $1.extend({}, defaults, item);\n            };\n            SelectAdapter.prototype.matches = function(params, data) {\n                var matcher = this.options.get(\"matcher\");\n                return matcher(params, data);\n            };\n            return SelectAdapter;\n        });\n        S2.define(\"select2/data/array\", [\n            \"./select\",\n            \"../utils\",\n            \"jquery\"\n        ], function(SelectAdapter, Utils, $1) {\n            function ArrayAdapter($element, options) {\n                this._dataToConvert = options.get(\"data\") || [];\n                ArrayAdapter.__super__.constructor.call(this, $element, options);\n            }\n            Utils.Extend(ArrayAdapter, SelectAdapter);\n            ArrayAdapter.prototype.bind = function(container, $container) {\n                ArrayAdapter.__super__.bind.call(this, container, $container);\n                this.addOptions(this.convertToOptions(this._dataToConvert));\n            };\n            ArrayAdapter.prototype.select = function(data) {\n                var $option = this.$element.find(\"option\").filter(function(i, elm) {\n                    return elm.value == data.id.toString();\n                });\n                if ($option.length === 0) {\n                    $option = this.option(data);\n                    this.addOptions($option);\n                }\n                ArrayAdapter.__super__.select.call(this, data);\n            };\n            ArrayAdapter.prototype.convertToOptions = function(data) {\n                var self = this;\n                var $existing = this.$element.find(\"option\");\n                var existingIds = $existing.map(function() {\n                    return self.item($1(this)).id;\n                }).get();\n                var $options = [];\n                // Filter out all items except for the one passed in the argument\n                function onlyItem(item) {\n                    return function() {\n                        return $1(this).val() == item.id;\n                    };\n                }\n                for(var d = 0; d < data.length; d++){\n                    var item = this._normalizeItem(data[d]);\n                    // Skip items which were pre-loaded, only merge the data\n                    if (existingIds.indexOf(item.id) >= 0) {\n                        var $existingOption = $existing.filter(onlyItem(item));\n                        var existingData = this.item($existingOption);\n                        var newData = $1.extend(true, {}, item, existingData);\n                        var $newOption = this.option(newData);\n                        $existingOption.replaceWith($newOption);\n                        continue;\n                    }\n                    var $option = this.option(item);\n                    if (item.children) {\n                        var $children = this.convertToOptions(item.children);\n                        $option.append($children);\n                    }\n                    $options.push($option);\n                }\n                return $options;\n            };\n            return ArrayAdapter;\n        });\n        S2.define(\"select2/data/ajax\", [\n            \"./array\",\n            \"../utils\",\n            \"jquery\"\n        ], function(ArrayAdapter, Utils, $1) {\n            function AjaxAdapter($element, options) {\n                this.ajaxOptions = this._applyDefaults(options.get(\"ajax\"));\n                if (this.ajaxOptions.processResults != null) {\n                    this.processResults = this.ajaxOptions.processResults;\n                }\n                AjaxAdapter.__super__.constructor.call(this, $element, options);\n            }\n            Utils.Extend(AjaxAdapter, ArrayAdapter);\n            AjaxAdapter.prototype._applyDefaults = function(options) {\n                var defaults = {\n                    data: function(params) {\n                        return $1.extend({}, params, {\n                            q: params.term\n                        });\n                    },\n                    transport: function(params, success, failure) {\n                        var $request = $1.ajax(params);\n                        $request.then(success);\n                        $request.fail(failure);\n                        return $request;\n                    }\n                };\n                return $1.extend({}, defaults, options, true);\n            };\n            AjaxAdapter.prototype.processResults = function(results) {\n                return results;\n            };\n            AjaxAdapter.prototype.query = function(params, callback) {\n                var matches = [];\n                var self = this;\n                if (this._request != null) {\n                    // JSONP requests cannot always be aborted\n                    if (typeof this._request.abort === \"function\") {\n                        this._request.abort();\n                    }\n                    this._request = null;\n                }\n                var options = $1.extend({\n                    type: \"GET\"\n                }, this.ajaxOptions);\n                if (typeof options.url === \"function\") {\n                    options.url = options.url.call(this.$element, params);\n                }\n                if (typeof options.data === \"function\") {\n                    options.data = options.data.call(this.$element, params);\n                }\n                function request() {\n                    var $request = options.transport(options, function(data) {\n                        var results = self.processResults(data, params);\n                        if (self.options.get(\"debug\") && window.console && console.error) {\n                            // Check to make sure that the response included a `results` key.\n                            if (!results || !results.results || !Array.isArray(results.results)) {\n                                console.error(\"Select2: The AJAX results did not return an array in the \" + \"`results` key of the response.\");\n                            }\n                        }\n                        callback(results);\n                    }, function() {\n                        // Attempt to detect if a request was aborted\n                        // Only works if the transport exposes a status property\n                        if (\"status\" in $request && ($request.status === 0 || $request.status === \"0\")) {\n                            return;\n                        }\n                        self.trigger(\"results:message\", {\n                            message: \"errorLoading\"\n                        });\n                    });\n                    self._request = $request;\n                }\n                if (this.ajaxOptions.delay && params.term != null) {\n                    if (this._queryTimeout) {\n                        window.clearTimeout(this._queryTimeout);\n                    }\n                    this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n                } else {\n                    request();\n                }\n            };\n            return AjaxAdapter;\n        });\n        S2.define(\"select2/data/tags\", [\n            \"jquery\"\n        ], function($1) {\n            function Tags(decorated, $element, options) {\n                var tags = options.get(\"tags\");\n                var createTag = options.get(\"createTag\");\n                if (createTag !== undefined) {\n                    this.createTag = createTag;\n                }\n                var insertTag = options.get(\"insertTag\");\n                if (insertTag !== undefined) {\n                    this.insertTag = insertTag;\n                }\n                decorated.call(this, $element, options);\n                if (Array.isArray(tags)) {\n                    for(var t = 0; t < tags.length; t++){\n                        var tag = tags[t];\n                        var item = this._normalizeItem(tag);\n                        var $option = this.option(item);\n                        this.$element.append($option);\n                    }\n                }\n            }\n            Tags.prototype.query = function(decorated, params, callback) {\n                var self = this;\n                this._removeOldTags();\n                if (params.term == null || params.page != null) {\n                    decorated.call(this, params, callback);\n                    return;\n                }\n                function wrapper(obj, child) {\n                    var data = obj.results;\n                    for(var i = 0; i < data.length; i++){\n                        var option = data[i];\n                        var checkChildren = option.children != null && !wrapper({\n                            results: option.children\n                        }, true);\n                        var optionText = (option.text || \"\").toUpperCase();\n                        var paramsTerm = (params.term || \"\").toUpperCase();\n                        var checkText = optionText === paramsTerm;\n                        if (checkText || checkChildren) {\n                            if (child) {\n                                return false;\n                            }\n                            obj.data = data;\n                            callback(obj);\n                            return;\n                        }\n                    }\n                    if (child) {\n                        return true;\n                    }\n                    var tag = self.createTag(params);\n                    if (tag != null) {\n                        var $option = self.option(tag);\n                        $option.attr(\"data-select2-tag\", \"true\");\n                        self.addOptions([\n                            $option\n                        ]);\n                        self.insertTag(data, tag);\n                    }\n                    obj.results = data;\n                    callback(obj);\n                }\n                decorated.call(this, params, wrapper);\n            };\n            Tags.prototype.createTag = function(decorated, params) {\n                if (params.term == null) {\n                    return null;\n                }\n                var term = params.term.trim();\n                if (term === \"\") {\n                    return null;\n                }\n                return {\n                    id: term,\n                    text: term\n                };\n            };\n            Tags.prototype.insertTag = function(_, data, tag) {\n                data.unshift(tag);\n            };\n            Tags.prototype._removeOldTags = function(_) {\n                var $options = this.$element.find(\"option[data-select2-tag]\");\n                $options.each(function() {\n                    if (this.selected) {\n                        return;\n                    }\n                    $1(this).remove();\n                });\n            };\n            return Tags;\n        });\n        S2.define(\"select2/data/tokenizer\", [\n            \"jquery\"\n        ], function($1) {\n            function Tokenizer(decorated, $element, options) {\n                var tokenizer = options.get(\"tokenizer\");\n                if (tokenizer !== undefined) {\n                    this.tokenizer = tokenizer;\n                }\n                decorated.call(this, $element, options);\n            }\n            Tokenizer.prototype.bind = function(decorated, container, $container) {\n                decorated.call(this, container, $container);\n                this.$search = container.dropdown.$search || container.selection.$search || $container.find(\".select2-search__field\");\n            };\n            Tokenizer.prototype.query = function(decorated, params, callback) {\n                var self = this;\n                function createAndSelect(data) {\n                    // Normalize the data object so we can use it for checks\n                    var item = self._normalizeItem(data);\n                    // Check if the data object already exists as a tag\n                    // Select it if it doesn't\n                    var $existingOptions = self.$element.find(\"option\").filter(function() {\n                        return $1(this).val() === item.id;\n                    });\n                    // If an existing option wasn't found for it, create the option\n                    if (!$existingOptions.length) {\n                        var $option = self.option(item);\n                        $option.attr(\"data-select2-tag\", true);\n                        self._removeOldTags();\n                        self.addOptions([\n                            $option\n                        ]);\n                    }\n                    // Select the item, now that we know there is an option for it\n                    select(item);\n                }\n                function select(data) {\n                    self.trigger(\"select\", {\n                        data: data\n                    });\n                }\n                params.term = params.term || \"\";\n                var tokenData = this.tokenizer(params, this.options, createAndSelect);\n                if (tokenData.term !== params.term) {\n                    // Replace the search term if we have the search box\n                    if (this.$search.length) {\n                        this.$search.val(tokenData.term);\n                        this.$search.trigger(\"focus\");\n                    }\n                    params.term = tokenData.term;\n                }\n                decorated.call(this, params, callback);\n            };\n            Tokenizer.prototype.tokenizer = function(_, params, options, callback) {\n                var separators = options.get(\"tokenSeparators\") || [];\n                var term = params.term;\n                var i = 0;\n                var createTag = this.createTag || function(params) {\n                    return {\n                        id: params.term,\n                        text: params.term\n                    };\n                };\n                while(i < term.length){\n                    var termChar = term[i];\n                    if (separators.indexOf(termChar) === -1) {\n                        i++;\n                        continue;\n                    }\n                    var part = term.substr(0, i);\n                    var partParams = $1.extend({}, params, {\n                        term: part\n                    });\n                    var data = createTag(partParams);\n                    if (data == null) {\n                        i++;\n                        continue;\n                    }\n                    callback(data);\n                    // Reset the term to not include the tokenized portion\n                    term = term.substr(i + 1) || \"\";\n                    i = 0;\n                }\n                return {\n                    term: term\n                };\n            };\n            return Tokenizer;\n        });\n        S2.define(\"select2/data/minimumInputLength\", [], function() {\n            function MinimumInputLength(decorated, $e, options) {\n                this.minimumInputLength = options.get(\"minimumInputLength\");\n                decorated.call(this, $e, options);\n            }\n            MinimumInputLength.prototype.query = function(decorated, params, callback) {\n                params.term = params.term || \"\";\n                if (params.term.length < this.minimumInputLength) {\n                    this.trigger(\"results:message\", {\n                        message: \"inputTooShort\",\n                        args: {\n                            minimum: this.minimumInputLength,\n                            input: params.term,\n                            params: params\n                        }\n                    });\n                    return;\n                }\n                decorated.call(this, params, callback);\n            };\n            return MinimumInputLength;\n        });\n        S2.define(\"select2/data/maximumInputLength\", [], function() {\n            function MaximumInputLength(decorated, $e, options) {\n                this.maximumInputLength = options.get(\"maximumInputLength\");\n                decorated.call(this, $e, options);\n            }\n            MaximumInputLength.prototype.query = function(decorated, params, callback) {\n                params.term = params.term || \"\";\n                if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {\n                    this.trigger(\"results:message\", {\n                        message: \"inputTooLong\",\n                        args: {\n                            maximum: this.maximumInputLength,\n                            input: params.term,\n                            params: params\n                        }\n                    });\n                    return;\n                }\n                decorated.call(this, params, callback);\n            };\n            return MaximumInputLength;\n        });\n        S2.define(\"select2/data/maximumSelectionLength\", [], function() {\n            function MaximumSelectionLength(decorated, $e, options) {\n                this.maximumSelectionLength = options.get(\"maximumSelectionLength\");\n                decorated.call(this, $e, options);\n            }\n            MaximumSelectionLength.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                container.on(\"select\", function() {\n                    self._checkIfMaximumSelected();\n                });\n            };\n            MaximumSelectionLength.prototype.query = function(decorated, params, callback) {\n                var self = this;\n                this._checkIfMaximumSelected(function() {\n                    decorated.call(self, params, callback);\n                });\n            };\n            MaximumSelectionLength.prototype._checkIfMaximumSelected = function(_, successCallback) {\n                var self = this;\n                this.current(function(currentData) {\n                    var count = currentData != null ? currentData.length : 0;\n                    if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {\n                        self.trigger(\"results:message\", {\n                            message: \"maximumSelected\",\n                            args: {\n                                maximum: self.maximumSelectionLength\n                            }\n                        });\n                        return;\n                    }\n                    if (successCallback) {\n                        successCallback();\n                    }\n                });\n            };\n            return MaximumSelectionLength;\n        });\n        S2.define(\"select2/dropdown\", [\n            \"jquery\",\n            \"./utils\"\n        ], function($1, Utils) {\n            function Dropdown($element, options) {\n                this.$element = $element;\n                this.options = options;\n                Dropdown.__super__.constructor.call(this);\n            }\n            Utils.Extend(Dropdown, Utils.Observable);\n            Dropdown.prototype.render = function() {\n                var $dropdown = $1('<span class=\"select2-dropdown\">' + '<span class=\"select2-results\"></span>' + \"</span>\");\n                $dropdown.attr(\"dir\", this.options.get(\"dir\"));\n                this.$dropdown = $dropdown;\n                return $dropdown;\n            };\n            Dropdown.prototype.bind = function() {\n            // Should be implemented in subclasses\n            };\n            Dropdown.prototype.position = function($dropdown, $container) {\n            // Should be implemented in subclasses\n            };\n            Dropdown.prototype.destroy = function() {\n                // Remove the dropdown from the DOM\n                this.$dropdown.remove();\n            };\n            return Dropdown;\n        });\n        S2.define(\"select2/dropdown/search\", [\n            \"jquery\"\n        ], function($1) {\n            function Search() {}\n            Search.prototype.render = function(decorated) {\n                var $rendered = decorated.call(this);\n                var searchLabel = this.options.get(\"translations\").get(\"search\");\n                var $search = $1('<span class=\"select2-search select2-search--dropdown\">' + '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' + ' autocorrect=\"off\" autocapitalize=\"none\"' + ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" />' + \"</span>\");\n                this.$searchContainer = $search;\n                this.$search = $search.find(\"input\");\n                this.$search.prop(\"autocomplete\", this.options.get(\"autocomplete\"));\n                this.$search.attr(\"aria-label\", searchLabel());\n                $rendered.prepend($search);\n                return $rendered;\n            };\n            Search.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                var resultsId = container.id + \"-results\";\n                decorated.call(this, container, $container);\n                this.$search.on(\"keydown\", function(evt) {\n                    self.trigger(\"keypress\", evt);\n                    self._keyUpPrevented = evt.isDefaultPrevented();\n                });\n                // Workaround for browsers which do not support the `input` event\n                // This will prevent double-triggering of events for browsers which support\n                // both the `keyup` and `input` events.\n                this.$search.on(\"input\", function(evt) {\n                    // Unbind the duplicated `keyup` event\n                    $1(this).off(\"keyup\");\n                });\n                this.$search.on(\"keyup input\", function(evt) {\n                    self.handleSearch(evt);\n                });\n                container.on(\"open\", function() {\n                    self.$search.attr(\"tabindex\", 0);\n                    self.$search.attr(\"aria-controls\", resultsId);\n                    self.$search.trigger(\"focus\");\n                    window.setTimeout(function() {\n                        self.$search.trigger(\"focus\");\n                    }, 0);\n                });\n                container.on(\"close\", function() {\n                    self.$search.attr(\"tabindex\", -1);\n                    self.$search.removeAttr(\"aria-controls\");\n                    self.$search.removeAttr(\"aria-activedescendant\");\n                    self.$search.val(\"\");\n                    self.$search.trigger(\"blur\");\n                });\n                container.on(\"focus\", function() {\n                    if (!container.isOpen()) {\n                        self.$search.trigger(\"focus\");\n                    }\n                });\n                container.on(\"results:all\", function(params) {\n                    if (params.query.term == null || params.query.term === \"\") {\n                        var showSearch = self.showSearch(params);\n                        if (showSearch) {\n                            self.$searchContainer[0].classList.remove(\"select2-search--hide\");\n                        } else {\n                            self.$searchContainer[0].classList.add(\"select2-search--hide\");\n                        }\n                    }\n                });\n                container.on(\"results:focus\", function(params) {\n                    if (params.data._resultId) {\n                        self.$search.attr(\"aria-activedescendant\", params.data._resultId);\n                    } else {\n                        self.$search.removeAttr(\"aria-activedescendant\");\n                    }\n                });\n            };\n            Search.prototype.handleSearch = function(evt) {\n                if (!this._keyUpPrevented) {\n                    var input = this.$search.val();\n                    this.trigger(\"query\", {\n                        term: input\n                    });\n                }\n                this._keyUpPrevented = false;\n            };\n            Search.prototype.showSearch = function(_, params) {\n                return true;\n            };\n            return Search;\n        });\n        S2.define(\"select2/dropdown/hidePlaceholder\", [], function() {\n            function HidePlaceholder(decorated, $element, options, dataAdapter) {\n                this.placeholder = this.normalizePlaceholder(options.get(\"placeholder\"));\n                decorated.call(this, $element, options, dataAdapter);\n            }\n            HidePlaceholder.prototype.append = function(decorated, data) {\n                data.results = this.removePlaceholder(data.results);\n                decorated.call(this, data);\n            };\n            HidePlaceholder.prototype.normalizePlaceholder = function(_, placeholder) {\n                if (typeof placeholder === \"string\") {\n                    placeholder = {\n                        id: \"\",\n                        text: placeholder\n                    };\n                }\n                return placeholder;\n            };\n            HidePlaceholder.prototype.removePlaceholder = function(_, data) {\n                var modifiedData = data.slice(0);\n                for(var d = data.length - 1; d >= 0; d--){\n                    var item = data[d];\n                    if (this.placeholder.id === item.id) {\n                        modifiedData.splice(d, 1);\n                    }\n                }\n                return modifiedData;\n            };\n            return HidePlaceholder;\n        });\n        S2.define(\"select2/dropdown/infiniteScroll\", [\n            \"jquery\"\n        ], function($1) {\n            function InfiniteScroll(decorated, $element, options, dataAdapter) {\n                this.lastParams = {};\n                decorated.call(this, $element, options, dataAdapter);\n                this.$loadingMore = this.createLoadingMore();\n                this.loading = false;\n            }\n            InfiniteScroll.prototype.append = function(decorated, data) {\n                this.$loadingMore.remove();\n                this.loading = false;\n                decorated.call(this, data);\n                if (this.showLoadingMore(data)) {\n                    this.$results.append(this.$loadingMore);\n                    this.loadMoreIfNeeded();\n                }\n            };\n            InfiniteScroll.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                container.on(\"query\", function(params) {\n                    self.lastParams = params;\n                    self.loading = true;\n                });\n                container.on(\"query:append\", function(params) {\n                    self.lastParams = params;\n                    self.loading = true;\n                });\n                this.$results.on(\"scroll\", this.loadMoreIfNeeded.bind(this));\n            };\n            InfiniteScroll.prototype.loadMoreIfNeeded = function() {\n                var isLoadMoreVisible = $1.contains(document.documentElement, this.$loadingMore[0]);\n                if (this.loading || !isLoadMoreVisible) {\n                    return;\n                }\n                var currentOffset = this.$results.offset().top + this.$results.outerHeight(false);\n                var loadingMoreOffset = this.$loadingMore.offset().top + this.$loadingMore.outerHeight(false);\n                if (currentOffset + 50 >= loadingMoreOffset) {\n                    this.loadMore();\n                }\n            };\n            InfiniteScroll.prototype.loadMore = function() {\n                this.loading = true;\n                var params = $1.extend({}, {\n                    page: 1\n                }, this.lastParams);\n                params.page++;\n                this.trigger(\"query:append\", params);\n            };\n            InfiniteScroll.prototype.showLoadingMore = function(_, data) {\n                return data.pagination && data.pagination.more;\n            };\n            InfiniteScroll.prototype.createLoadingMore = function() {\n                var $option = $1(\"<li \" + 'class=\"select2-results__option select2-results__option--load-more\"' + 'role=\"option\" aria-disabled=\"true\"></li>');\n                var message = this.options.get(\"translations\").get(\"loadingMore\");\n                $option.html(message(this.lastParams));\n                return $option;\n            };\n            return InfiniteScroll;\n        });\n        S2.define(\"select2/dropdown/attachBody\", [\n            \"jquery\",\n            \"../utils\"\n        ], function($1, Utils) {\n            function AttachBody(decorated, $element, options) {\n                this.$dropdownParent = $1(options.get(\"dropdownParent\") || document.body);\n                decorated.call(this, $element, options);\n            }\n            AttachBody.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                container.on(\"open\", function() {\n                    self._showDropdown();\n                    self._attachPositioningHandler(container);\n                    // Must bind after the results handlers to ensure correct sizing\n                    self._bindContainerResultHandlers(container);\n                });\n                container.on(\"close\", function() {\n                    self._hideDropdown();\n                    self._detachPositioningHandler(container);\n                });\n                this.$dropdownContainer.on(\"mousedown\", function(evt) {\n                    evt.stopPropagation();\n                });\n            };\n            AttachBody.prototype.destroy = function(decorated) {\n                decorated.call(this);\n                this.$dropdownContainer.remove();\n            };\n            AttachBody.prototype.position = function(decorated, $dropdown, $container) {\n                // Clone all of the container classes\n                $dropdown.attr(\"class\", $container.attr(\"class\"));\n                $dropdown[0].classList.remove(\"select2\");\n                $dropdown[0].classList.add(\"select2-container--open\");\n                $dropdown.css({\n                    position: \"absolute\",\n                    top: -999999\n                });\n                this.$container = $container;\n            };\n            AttachBody.prototype.render = function(decorated) {\n                var $container = $1(\"<span></span>\");\n                var $dropdown = decorated.call(this);\n                $container.append($dropdown);\n                this.$dropdownContainer = $container;\n                return $container;\n            };\n            AttachBody.prototype._hideDropdown = function(decorated) {\n                this.$dropdownContainer.detach();\n            };\n            AttachBody.prototype._bindContainerResultHandlers = function(decorated, container) {\n                // These should only be bound once\n                if (this._containerResultsHandlersBound) {\n                    return;\n                }\n                var self = this;\n                container.on(\"results:all\", function() {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n                container.on(\"results:append\", function() {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n                container.on(\"results:message\", function() {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n                container.on(\"select\", function() {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n                container.on(\"unselect\", function() {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n                this._containerResultsHandlersBound = true;\n            };\n            AttachBody.prototype._attachPositioningHandler = function(decorated, container) {\n                var self = this;\n                var scrollEvent = \"scroll.select2.\" + container.id;\n                var resizeEvent = \"resize.select2.\" + container.id;\n                var orientationEvent = \"orientationchange.select2.\" + container.id;\n                var $watchers = this.$container.parents().filter(Utils.hasScroll);\n                $watchers.each(function() {\n                    Utils.StoreData(this, \"select2-scroll-position\", {\n                        x: $1(this).scrollLeft(),\n                        y: $1(this).scrollTop()\n                    });\n                });\n                $watchers.on(scrollEvent, function(ev) {\n                    var position = Utils.GetData(this, \"select2-scroll-position\");\n                    $1(this).scrollTop(position.y);\n                });\n                $1(window).on(scrollEvent + \" \" + resizeEvent + \" \" + orientationEvent, function(e) {\n                    self._positionDropdown();\n                    self._resizeDropdown();\n                });\n            };\n            AttachBody.prototype._detachPositioningHandler = function(decorated, container) {\n                var scrollEvent = \"scroll.select2.\" + container.id;\n                var resizeEvent = \"resize.select2.\" + container.id;\n                var orientationEvent = \"orientationchange.select2.\" + container.id;\n                var $watchers = this.$container.parents().filter(Utils.hasScroll);\n                $watchers.off(scrollEvent);\n                $1(window).off(scrollEvent + \" \" + resizeEvent + \" \" + orientationEvent);\n            };\n            AttachBody.prototype._positionDropdown = function() {\n                var $window = $1(window);\n                var isCurrentlyAbove = this.$dropdown[0].classList.contains(\"select2-dropdown--above\");\n                var isCurrentlyBelow = this.$dropdown[0].classList.contains(\"select2-dropdown--below\");\n                var newDirection = null;\n                var offset = this.$container.offset();\n                offset.bottom = offset.top + this.$container.outerHeight(false);\n                var container = {\n                    height: this.$container.outerHeight(false)\n                };\n                container.top = offset.top;\n                container.bottom = offset.top + container.height;\n                var dropdown = {\n                    height: this.$dropdown.outerHeight(false)\n                };\n                var viewport = {\n                    top: $window.scrollTop(),\n                    bottom: $window.scrollTop() + $window.height()\n                };\n                var enoughRoomAbove = viewport.top < offset.top - dropdown.height;\n                var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;\n                var css = {\n                    left: offset.left,\n                    top: container.bottom\n                };\n                // Determine what the parent element is to use for calculating the offset\n                var $offsetParent = this.$dropdownParent;\n                // For statically positioned elements, we need to get the element\n                // that is determining the offset\n                if ($offsetParent.css(\"position\") === \"static\") {\n                    $offsetParent = $offsetParent.offsetParent();\n                }\n                var parentOffset = {\n                    top: 0,\n                    left: 0\n                };\n                if ($1.contains(document.body, $offsetParent[0]) || $offsetParent[0].isConnected) {\n                    parentOffset = $offsetParent.offset();\n                }\n                css.top -= parentOffset.top;\n                css.left -= parentOffset.left;\n                if (!isCurrentlyAbove && !isCurrentlyBelow) {\n                    newDirection = \"below\";\n                }\n                if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {\n                    newDirection = \"above\";\n                } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {\n                    newDirection = \"below\";\n                }\n                if (newDirection == \"above\" || isCurrentlyAbove && newDirection !== \"below\") {\n                    css.top = container.top - parentOffset.top - dropdown.height;\n                }\n                if (newDirection != null) {\n                    this.$dropdown[0].classList.remove(\"select2-dropdown--below\");\n                    this.$dropdown[0].classList.remove(\"select2-dropdown--above\");\n                    this.$dropdown[0].classList.add(\"select2-dropdown--\" + newDirection);\n                    this.$container[0].classList.remove(\"select2-container--below\");\n                    this.$container[0].classList.remove(\"select2-container--above\");\n                    this.$container[0].classList.add(\"select2-container--\" + newDirection);\n                }\n                this.$dropdownContainer.css(css);\n            };\n            AttachBody.prototype._resizeDropdown = function() {\n                var css = {\n                    width: this.$container.outerWidth(false) + \"px\"\n                };\n                if (this.options.get(\"dropdownAutoWidth\")) {\n                    css.minWidth = css.width;\n                    css.position = \"relative\";\n                    css.width = \"auto\";\n                }\n                this.$dropdown.css(css);\n            };\n            AttachBody.prototype._showDropdown = function(decorated) {\n                this.$dropdownContainer.appendTo(this.$dropdownParent);\n                this._positionDropdown();\n                this._resizeDropdown();\n            };\n            return AttachBody;\n        });\n        S2.define(\"select2/dropdown/minimumResultsForSearch\", [], function() {\n            function countResults(data) {\n                var count = 0;\n                for(var d = 0; d < data.length; d++){\n                    var item = data[d];\n                    if (item.children) {\n                        count += countResults(item.children);\n                    } else {\n                        count++;\n                    }\n                }\n                return count;\n            }\n            function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {\n                this.minimumResultsForSearch = options.get(\"minimumResultsForSearch\");\n                if (this.minimumResultsForSearch < 0) {\n                    this.minimumResultsForSearch = Infinity;\n                }\n                decorated.call(this, $element, options, dataAdapter);\n            }\n            MinimumResultsForSearch.prototype.showSearch = function(decorated, params) {\n                if (countResults(params.data.results) < this.minimumResultsForSearch) {\n                    return false;\n                }\n                return decorated.call(this, params);\n            };\n            return MinimumResultsForSearch;\n        });\n        S2.define(\"select2/dropdown/selectOnClose\", [\n            \"../utils\"\n        ], function(Utils) {\n            function SelectOnClose() {}\n            SelectOnClose.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                container.on(\"close\", function(params) {\n                    self._handleSelectOnClose(params);\n                });\n            };\n            SelectOnClose.prototype._handleSelectOnClose = function(_, params) {\n                if (params && params.originalSelect2Event != null) {\n                    var event = params.originalSelect2Event;\n                    // Don't select an item if the close event was triggered from a select or\n                    // unselect event\n                    if (event._type === \"select\" || event._type === \"unselect\") {\n                        return;\n                    }\n                }\n                var $highlightedResults = this.getHighlightedResults();\n                // Only select highlighted results\n                if ($highlightedResults.length < 1) {\n                    return;\n                }\n                var data = Utils.GetData($highlightedResults[0], \"data\");\n                // Don't re-select already selected resulte\n                if (data.element != null && data.element.selected || data.element == null && data.selected) {\n                    return;\n                }\n                this.trigger(\"select\", {\n                    data: data\n                });\n            };\n            return SelectOnClose;\n        });\n        S2.define(\"select2/dropdown/closeOnSelect\", [], function() {\n            function CloseOnSelect() {}\n            CloseOnSelect.prototype.bind = function(decorated, container, $container) {\n                var self = this;\n                decorated.call(this, container, $container);\n                container.on(\"select\", function(evt) {\n                    self._selectTriggered(evt);\n                });\n                container.on(\"unselect\", function(evt) {\n                    self._selectTriggered(evt);\n                });\n            };\n            CloseOnSelect.prototype._selectTriggered = function(_, evt) {\n                var originalEvent = evt.originalEvent;\n                // Don't close if the control key is being held\n                if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {\n                    return;\n                }\n                this.trigger(\"close\", {\n                    originalEvent: originalEvent,\n                    originalSelect2Event: evt\n                });\n            };\n            return CloseOnSelect;\n        });\n        S2.define(\"select2/dropdown/dropdownCss\", [\n            \"../utils\"\n        ], function(Utils) {\n            function DropdownCSS() {}\n            DropdownCSS.prototype.render = function(decorated) {\n                var $dropdown = decorated.call(this);\n                var dropdownCssClass = this.options.get(\"dropdownCssClass\") || \"\";\n                if (dropdownCssClass.indexOf(\":all:\") !== -1) {\n                    dropdownCssClass = dropdownCssClass.replace(\":all:\", \"\");\n                    Utils.copyNonInternalCssClasses($dropdown[0], this.$element[0]);\n                }\n                $dropdown.addClass(dropdownCssClass);\n                return $dropdown;\n            };\n            return DropdownCSS;\n        });\n        S2.define(\"select2/dropdown/tagsSearchHighlight\", [\n            \"../utils\"\n        ], function(Utils) {\n            function TagsSearchHighlight() {}\n            TagsSearchHighlight.prototype.highlightFirstItem = function(decorated) {\n                var $options = this.$results.find(\".select2-results__option--selectable\" + \":not(.select2-results__option--selected)\");\n                if ($options.length > 0) {\n                    var $firstOption = $options.first();\n                    var data = Utils.GetData($firstOption[0], \"data\");\n                    var firstElement = data.element;\n                    if (firstElement && firstElement.getAttribute) {\n                        if (firstElement.getAttribute(\"data-select2-tag\") === \"true\") {\n                            $firstOption.trigger(\"mouseenter\");\n                            return;\n                        }\n                    }\n                }\n                decorated.call(this);\n            };\n            return TagsSearchHighlight;\n        });\n        S2.define(\"select2/i18n/en\", [], function() {\n            // English\n            return {\n                errorLoading: function() {\n                    return \"The results could not be loaded.\";\n                },\n                inputTooLong: function(args) {\n                    var overChars = args.input.length - args.maximum;\n                    var message = \"Please delete \" + overChars + \" character\";\n                    if (overChars != 1) {\n                        message += \"s\";\n                    }\n                    return message;\n                },\n                inputTooShort: function(args) {\n                    var remainingChars = args.minimum - args.input.length;\n                    var message = \"Please enter \" + remainingChars + \" or more characters\";\n                    return message;\n                },\n                loadingMore: function() {\n                    return \"Loading more results…\";\n                },\n                maximumSelected: function(args) {\n                    var message = \"You can only select \" + args.maximum + \" item\";\n                    if (args.maximum != 1) {\n                        message += \"s\";\n                    }\n                    return message;\n                },\n                noResults: function() {\n                    return \"No results found\";\n                },\n                searching: function() {\n                    return \"Searching…\";\n                },\n                removeAllItems: function() {\n                    return \"Remove all items\";\n                },\n                removeItem: function() {\n                    return \"Remove item\";\n                },\n                search: function() {\n                    return \"Search\";\n                }\n            };\n        });\n        S2.define(\"select2/defaults\", [\n            \"jquery\",\n            \"./results\",\n            \"./selection/single\",\n            \"./selection/multiple\",\n            \"./selection/placeholder\",\n            \"./selection/allowClear\",\n            \"./selection/search\",\n            \"./selection/selectionCss\",\n            \"./selection/eventRelay\",\n            \"./utils\",\n            \"./translation\",\n            \"./diacritics\",\n            \"./data/select\",\n            \"./data/array\",\n            \"./data/ajax\",\n            \"./data/tags\",\n            \"./data/tokenizer\",\n            \"./data/minimumInputLength\",\n            \"./data/maximumInputLength\",\n            \"./data/maximumSelectionLength\",\n            \"./dropdown\",\n            \"./dropdown/search\",\n            \"./dropdown/hidePlaceholder\",\n            \"./dropdown/infiniteScroll\",\n            \"./dropdown/attachBody\",\n            \"./dropdown/minimumResultsForSearch\",\n            \"./dropdown/selectOnClose\",\n            \"./dropdown/closeOnSelect\",\n            \"./dropdown/dropdownCss\",\n            \"./dropdown/tagsSearchHighlight\",\n            \"./i18n/en\"\n        ], function($1, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, SelectionCSS, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, DropdownCSS, TagsSearchHighlight, EnglishTranslation) {\n            function Defaults() {\n                this.reset();\n            }\n            Defaults.prototype.apply = function(options) {\n                options = $1.extend(true, {}, this.defaults, options);\n                if (options.dataAdapter == null) {\n                    if (options.ajax != null) {\n                        options.dataAdapter = AjaxData;\n                    } else if (options.data != null) {\n                        options.dataAdapter = ArrayData;\n                    } else {\n                        options.dataAdapter = SelectData;\n                    }\n                    if (options.minimumInputLength > 0) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength);\n                    }\n                    if (options.maximumInputLength > 0) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength);\n                    }\n                    if (options.maximumSelectionLength > 0) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength);\n                    }\n                    if (options.tags) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);\n                    }\n                    if (options.tokenSeparators != null || options.tokenizer != null) {\n                        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer);\n                    }\n                }\n                if (options.resultsAdapter == null) {\n                    options.resultsAdapter = ResultsList;\n                    if (options.ajax != null) {\n                        options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll);\n                    }\n                    if (options.placeholder != null) {\n                        options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder);\n                    }\n                    if (options.selectOnClose) {\n                        options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose);\n                    }\n                    if (options.tags) {\n                        options.resultsAdapter = Utils.Decorate(options.resultsAdapter, TagsSearchHighlight);\n                    }\n                }\n                if (options.dropdownAdapter == null) {\n                    if (options.multiple) {\n                        options.dropdownAdapter = Dropdown;\n                    } else {\n                        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);\n                        options.dropdownAdapter = SearchableDropdown;\n                    }\n                    if (options.minimumResultsForSearch !== 0) {\n                        options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch);\n                    }\n                    if (options.closeOnSelect) {\n                        options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect);\n                    }\n                    if (options.dropdownCssClass != null) {\n                        options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS);\n                    }\n                    options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody);\n                }\n                if (options.selectionAdapter == null) {\n                    if (options.multiple) {\n                        options.selectionAdapter = MultipleSelection;\n                    } else {\n                        options.selectionAdapter = SingleSelection;\n                    }\n                    // Add the placeholder mixin if a placeholder was specified\n                    if (options.placeholder != null) {\n                        options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder);\n                    }\n                    if (options.allowClear) {\n                        options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear);\n                    }\n                    if (options.multiple) {\n                        options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch);\n                    }\n                    if (options.selectionCssClass != null) {\n                        options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionCSS);\n                    }\n                    options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay);\n                }\n                // If the defaults were not previously applied from an element, it is\n                // possible for the language option to have not been resolved\n                options.language = this._resolveLanguage(options.language);\n                // Always fall back to English since it will always be complete\n                options.language.push(\"en\");\n                var uniqueLanguages = [];\n                for(var l = 0; l < options.language.length; l++){\n                    var language = options.language[l];\n                    if (uniqueLanguages.indexOf(language) === -1) {\n                        uniqueLanguages.push(language);\n                    }\n                }\n                options.language = uniqueLanguages;\n                options.translations = this._processTranslations(options.language, options.debug);\n                return options;\n            };\n            Defaults.prototype.reset = function() {\n                function stripDiacritics(text) {\n                    // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n                    function match(a) {\n                        return DIACRITICS[a] || a;\n                    }\n                    return text.replace(/[^\\u0000-\\u007E]/g, match);\n                }\n                function matcher(params, data) {\n                    // Always return the object if there is nothing to compare\n                    if (params.term == null || params.term.trim() === \"\") {\n                        return data;\n                    }\n                    // Do a recursive check for options with children\n                    if (data.children && data.children.length > 0) {\n                        // Clone the data object if there are children\n                        // This is required as we modify the object to remove any non-matches\n                        var match = $1.extend(true, {}, data);\n                        // Check each child of the option\n                        for(var c = data.children.length - 1; c >= 0; c--){\n                            var child = data.children[c];\n                            var matches = matcher(params, child);\n                            // If there wasn't a match, remove the object in the array\n                            if (matches == null) {\n                                match.children.splice(c, 1);\n                            }\n                        }\n                        // If any children matched, return the new object\n                        if (match.children.length > 0) {\n                            return match;\n                        }\n                        // If there were no matching children, check just the plain object\n                        return matcher(params, match);\n                    }\n                    var original = stripDiacritics(data.text).toUpperCase();\n                    var term = stripDiacritics(params.term).toUpperCase();\n                    // Check if the text contains the term\n                    if (original.indexOf(term) > -1) {\n                        return data;\n                    }\n                    // If it doesn't contain the term, don't return anything\n                    return null;\n                }\n                this.defaults = {\n                    amdLanguageBase: \"./i18n/\",\n                    autocomplete: \"off\",\n                    closeOnSelect: true,\n                    debug: false,\n                    dropdownAutoWidth: false,\n                    escapeMarkup: Utils.escapeMarkup,\n                    language: {},\n                    matcher: matcher,\n                    minimumInputLength: 0,\n                    maximumInputLength: 0,\n                    maximumSelectionLength: 0,\n                    minimumResultsForSearch: 0,\n                    selectOnClose: false,\n                    scrollAfterSelect: false,\n                    sorter: function(data) {\n                        return data;\n                    },\n                    templateResult: function(result) {\n                        return result.text;\n                    },\n                    templateSelection: function(selection) {\n                        return selection.text;\n                    },\n                    theme: \"default\",\n                    width: \"resolve\"\n                };\n            };\n            Defaults.prototype.applyFromElement = function(options, $element) {\n                var optionLanguage = options.language;\n                var defaultLanguage = this.defaults.language;\n                var elementLanguage = $element.prop(\"lang\");\n                var parentLanguage = $element.closest(\"[lang]\").prop(\"lang\");\n                var languages = Array.prototype.concat.call(this._resolveLanguage(elementLanguage), this._resolveLanguage(optionLanguage), this._resolveLanguage(defaultLanguage), this._resolveLanguage(parentLanguage));\n                options.language = languages;\n                return options;\n            };\n            Defaults.prototype._resolveLanguage = function(language) {\n                if (!language) {\n                    return [];\n                }\n                if ($1.isEmptyObject(language)) {\n                    return [];\n                }\n                if ($1.isPlainObject(language)) {\n                    return [\n                        language\n                    ];\n                }\n                var languages;\n                if (!Array.isArray(language)) {\n                    languages = [\n                        language\n                    ];\n                } else {\n                    languages = language;\n                }\n                var resolvedLanguages = [];\n                for(var l = 0; l < languages.length; l++){\n                    resolvedLanguages.push(languages[l]);\n                    if (typeof languages[l] === \"string\" && languages[l].indexOf(\"-\") > 0) {\n                        // Extract the region information if it is included\n                        var languageParts = languages[l].split(\"-\");\n                        var baseLanguage = languageParts[0];\n                        resolvedLanguages.push(baseLanguage);\n                    }\n                }\n                return resolvedLanguages;\n            };\n            Defaults.prototype._processTranslations = function(languages, debug) {\n                var translations = new Translation();\n                for(var l = 0; l < languages.length; l++){\n                    var languageData = new Translation();\n                    var language = languages[l];\n                    if (typeof language === \"string\") {\n                        try {\n                            // Try to load it with the original name\n                            languageData = Translation.loadPath(language);\n                        } catch (e) {\n                            try {\n                                // If we couldn't load it, check if it wasn't the full path\n                                language = this.defaults.amdLanguageBase + language;\n                                languageData = Translation.loadPath(language);\n                            } catch (ex) {\n                                // The translation could not be loaded at all. Sometimes this is\n                                // because of a configuration problem, other times this can be\n                                // because of how Select2 helps load all possible translation files\n                                if (debug && window.console && console.warn) {\n                                    console.warn('Select2: The language file for \"' + language + '\" could ' + \"not be automatically loaded. A fallback will be used instead.\");\n                                }\n                            }\n                        }\n                    } else if ($1.isPlainObject(language)) {\n                        languageData = new Translation(language);\n                    } else {\n                        languageData = language;\n                    }\n                    translations.extend(languageData);\n                }\n                return translations;\n            };\n            Defaults.prototype.set = function(key, value) {\n                var camelKey = $1.camelCase(key);\n                var data = {};\n                data[camelKey] = value;\n                var convertedData = Utils._convertData(data);\n                $1.extend(true, this.defaults, convertedData);\n            };\n            var defaults = new Defaults();\n            return defaults;\n        });\n        S2.define(\"select2/options\", [\n            \"jquery\",\n            \"./defaults\",\n            \"./utils\"\n        ], function($1, Defaults, Utils) {\n            function Options(options, $element) {\n                this.options = options;\n                if ($element != null) {\n                    this.fromElement($element);\n                }\n                if ($element != null) {\n                    this.options = Defaults.applyFromElement(this.options, $element);\n                }\n                this.options = Defaults.apply(this.options);\n            }\n            Options.prototype.fromElement = function($e) {\n                var excludedData = [\n                    \"select2\"\n                ];\n                if (this.options.multiple == null) {\n                    this.options.multiple = $e.prop(\"multiple\");\n                }\n                if (this.options.disabled == null) {\n                    this.options.disabled = $e.prop(\"disabled\");\n                }\n                if (this.options.autocomplete == null && $e.prop(\"autocomplete\")) {\n                    this.options.autocomplete = $e.prop(\"autocomplete\");\n                }\n                if (this.options.dir == null) {\n                    if ($e.prop(\"dir\")) {\n                        this.options.dir = $e.prop(\"dir\");\n                    } else if ($e.closest(\"[dir]\").prop(\"dir\")) {\n                        this.options.dir = $e.closest(\"[dir]\").prop(\"dir\");\n                    } else {\n                        this.options.dir = \"ltr\";\n                    }\n                }\n                $e.prop(\"disabled\", this.options.disabled);\n                $e.prop(\"multiple\", this.options.multiple);\n                if (Utils.GetData($e[0], \"select2Tags\")) {\n                    if (this.options.debug && window.console && console.warn) {\n                        console.warn(\"Select2: The `data-select2-tags` attribute has been changed to \" + 'use the `data-data` and `data-tags=\"true\"` attributes and will be ' + \"removed in future versions of Select2.\");\n                    }\n                    Utils.StoreData($e[0], \"data\", Utils.GetData($e[0], \"select2Tags\"));\n                    Utils.StoreData($e[0], \"tags\", true);\n                }\n                if (Utils.GetData($e[0], \"ajaxUrl\")) {\n                    if (this.options.debug && window.console && console.warn) {\n                        console.warn(\"Select2: The `data-ajax-url` attribute has been changed to \" + \"`data-ajax--url` and support for the old attribute will be removed\" + \" in future versions of Select2.\");\n                    }\n                    $e.attr(\"ajax--url\", Utils.GetData($e[0], \"ajaxUrl\"));\n                    Utils.StoreData($e[0], \"ajax-Url\", Utils.GetData($e[0], \"ajaxUrl\"));\n                }\n                var dataset = {};\n                function upperCaseLetter(_, letter) {\n                    return letter.toUpperCase();\n                }\n                // Pre-load all of the attributes which are prefixed with `data-`\n                for(var attr = 0; attr < $e[0].attributes.length; attr++){\n                    var attributeName = $e[0].attributes[attr].name;\n                    var prefix = \"data-\";\n                    if (attributeName.substr(0, prefix.length) == prefix) {\n                        // Get the contents of the attribute after `data-`\n                        var dataName = attributeName.substring(prefix.length);\n                        // Get the data contents from the consistent source\n                        // This is more than likely the jQuery data helper\n                        var dataValue = Utils.GetData($e[0], dataName);\n                        // camelCase the attribute name to match the spec\n                        var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);\n                        // Store the data attribute contents into the dataset since\n                        dataset[camelDataName] = dataValue;\n                    }\n                }\n                // Prefer the element's `dataset` attribute if it exists\n                // jQuery 1.x does not correctly handle data attributes with multiple dashes\n                if ($1.fn.jquery && $1.fn.jquery.substr(0, 2) == \"1.\" && $e[0].dataset) {\n                    dataset = $1.extend(true, {}, $e[0].dataset, dataset);\n                }\n                // Prefer our internal data cache if it exists\n                var data = $1.extend(true, {}, Utils.GetData($e[0]), dataset);\n                data = Utils._convertData(data);\n                for(var key in data){\n                    if (excludedData.indexOf(key) > -1) {\n                        continue;\n                    }\n                    if ($1.isPlainObject(this.options[key])) {\n                        $1.extend(this.options[key], data[key]);\n                    } else {\n                        this.options[key] = data[key];\n                    }\n                }\n                return this;\n            };\n            Options.prototype.get = function(key) {\n                return this.options[key];\n            };\n            Options.prototype.set = function(key, val) {\n                this.options[key] = val;\n            };\n            return Options;\n        });\n        S2.define(\"select2/core\", [\n            \"jquery\",\n            \"./options\",\n            \"./utils\",\n            \"./keys\"\n        ], function($1, Options, Utils, KEYS) {\n            var Select2 = function($element, options) {\n                if (Utils.GetData($element[0], \"select2\") != null) {\n                    Utils.GetData($element[0], \"select2\").destroy();\n                }\n                this.$element = $element;\n                this.id = this._generateId($element);\n                options = options || {};\n                this.options = new Options(options, $element);\n                Select2.__super__.constructor.call(this);\n                // Set up the tabindex\n                var tabindex = $element.attr(\"tabindex\") || 0;\n                Utils.StoreData($element[0], \"old-tabindex\", tabindex);\n                $element.attr(\"tabindex\", \"-1\");\n                // Set up containers and adapters\n                var DataAdapter = this.options.get(\"dataAdapter\");\n                this.dataAdapter = new DataAdapter($element, this.options);\n                var $container = this.render();\n                this._placeContainer($container);\n                var SelectionAdapter = this.options.get(\"selectionAdapter\");\n                this.selection = new SelectionAdapter($element, this.options);\n                this.$selection = this.selection.render();\n                this.selection.position(this.$selection, $container);\n                var DropdownAdapter = this.options.get(\"dropdownAdapter\");\n                this.dropdown = new DropdownAdapter($element, this.options);\n                this.$dropdown = this.dropdown.render();\n                this.dropdown.position(this.$dropdown, $container);\n                var ResultsAdapter = this.options.get(\"resultsAdapter\");\n                this.results = new ResultsAdapter($element, this.options, this.dataAdapter);\n                this.$results = this.results.render();\n                this.results.position(this.$results, this.$dropdown);\n                // Bind events\n                var self = this;\n                // Bind the container to all of the adapters\n                this._bindAdapters();\n                // Register any DOM event handlers\n                this._registerDomEvents();\n                // Register any internal event handlers\n                this._registerDataEvents();\n                this._registerSelectionEvents();\n                this._registerDropdownEvents();\n                this._registerResultsEvents();\n                this._registerEvents();\n                // Set the initial state\n                this.dataAdapter.current(function(initialData) {\n                    self.trigger(\"selection:update\", {\n                        data: initialData\n                    });\n                });\n                // Hide the original select\n                $element[0].classList.add(\"select2-hidden-accessible\");\n                $element.attr(\"aria-hidden\", \"true\");\n                // Synchronize any monitored attributes\n                this._syncAttributes();\n                Utils.StoreData($element[0], \"select2\", this);\n                // Ensure backwards compatibility with $element.data('select2').\n                $element.data(\"select2\", this);\n            };\n            Utils.Extend(Select2, Utils.Observable);\n            Select2.prototype._generateId = function($element) {\n                var id = \"\";\n                if ($element.attr(\"id\") != null) {\n                    id = $element.attr(\"id\");\n                } else if ($element.attr(\"name\") != null) {\n                    id = $element.attr(\"name\") + \"-\" + Utils.generateChars(2);\n                } else {\n                    id = Utils.generateChars(4);\n                }\n                id = id.replace(/(:|\\.|\\[|\\]|,)/g, \"\");\n                id = \"select2-\" + id;\n                return id;\n            };\n            Select2.prototype._placeContainer = function($container) {\n                $container.insertAfter(this.$element);\n                var width = this._resolveWidth(this.$element, this.options.get(\"width\"));\n                if (width != null) {\n                    $container.css(\"width\", width);\n                }\n            };\n            Select2.prototype._resolveWidth = function($element, method) {\n                var WIDTH = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n                if (method == \"resolve\") {\n                    var styleWidth = this._resolveWidth($element, \"style\");\n                    if (styleWidth != null) {\n                        return styleWidth;\n                    }\n                    return this._resolveWidth($element, \"element\");\n                }\n                if (method == \"element\") {\n                    var elementWidth = $element.outerWidth(false);\n                    if (elementWidth <= 0) {\n                        return \"auto\";\n                    }\n                    return elementWidth + \"px\";\n                }\n                if (method == \"style\") {\n                    var style = $element.attr(\"style\");\n                    if (typeof style !== \"string\") {\n                        return null;\n                    }\n                    var attrs = style.split(\";\");\n                    for(var i = 0, l = attrs.length; i < l; i = i + 1){\n                        var attr = attrs[i].replace(/\\s/g, \"\");\n                        var matches = attr.match(WIDTH);\n                        if (matches !== null && matches.length >= 1) {\n                            return matches[1];\n                        }\n                    }\n                    return null;\n                }\n                if (method == \"computedstyle\") {\n                    var computedStyle = window.getComputedStyle($element[0]);\n                    return computedStyle.width;\n                }\n                return method;\n            };\n            Select2.prototype._bindAdapters = function() {\n                this.dataAdapter.bind(this, this.$container);\n                this.selection.bind(this, this.$container);\n                this.dropdown.bind(this, this.$container);\n                this.results.bind(this, this.$container);\n            };\n            Select2.prototype._registerDomEvents = function() {\n                var self = this;\n                this.$element.on(\"change.select2\", function() {\n                    self.dataAdapter.current(function(data) {\n                        self.trigger(\"selection:update\", {\n                            data: data\n                        });\n                    });\n                });\n                this.$element.on(\"focus.select2\", function(evt) {\n                    self.trigger(\"focus\", evt);\n                });\n                this._syncA = Utils.bind(this._syncAttributes, this);\n                this._syncS = Utils.bind(this._syncSubtree, this);\n                this._observer = new window.MutationObserver(function(mutations) {\n                    self._syncA();\n                    self._syncS(mutations);\n                });\n                this._observer.observe(this.$element[0], {\n                    attributes: true,\n                    childList: true,\n                    subtree: false\n                });\n            };\n            Select2.prototype._registerDataEvents = function() {\n                var self = this;\n                this.dataAdapter.on(\"*\", function(name, params) {\n                    self.trigger(name, params);\n                });\n            };\n            Select2.prototype._registerSelectionEvents = function() {\n                var self = this;\n                var nonRelayEvents = [\n                    \"toggle\",\n                    \"focus\"\n                ];\n                this.selection.on(\"toggle\", function() {\n                    self.toggleDropdown();\n                });\n                this.selection.on(\"focus\", function(params) {\n                    self.focus(params);\n                });\n                this.selection.on(\"*\", function(name, params) {\n                    if (nonRelayEvents.indexOf(name) !== -1) {\n                        return;\n                    }\n                    self.trigger(name, params);\n                });\n            };\n            Select2.prototype._registerDropdownEvents = function() {\n                var self = this;\n                this.dropdown.on(\"*\", function(name, params) {\n                    self.trigger(name, params);\n                });\n            };\n            Select2.prototype._registerResultsEvents = function() {\n                var self = this;\n                this.results.on(\"*\", function(name, params) {\n                    self.trigger(name, params);\n                });\n            };\n            Select2.prototype._registerEvents = function() {\n                var self = this;\n                this.on(\"open\", function() {\n                    self.$container[0].classList.add(\"select2-container--open\");\n                });\n                this.on(\"close\", function() {\n                    self.$container[0].classList.remove(\"select2-container--open\");\n                });\n                this.on(\"enable\", function() {\n                    self.$container[0].classList.remove(\"select2-container--disabled\");\n                });\n                this.on(\"disable\", function() {\n                    self.$container[0].classList.add(\"select2-container--disabled\");\n                });\n                this.on(\"blur\", function() {\n                    self.$container[0].classList.remove(\"select2-container--focus\");\n                });\n                this.on(\"query\", function(params) {\n                    if (!self.isOpen()) {\n                        self.trigger(\"open\", {});\n                    }\n                    this.dataAdapter.query(params, function(data) {\n                        self.trigger(\"results:all\", {\n                            data: data,\n                            query: params\n                        });\n                    });\n                });\n                this.on(\"query:append\", function(params) {\n                    this.dataAdapter.query(params, function(data) {\n                        self.trigger(\"results:append\", {\n                            data: data,\n                            query: params\n                        });\n                    });\n                });\n                this.on(\"keypress\", function(evt) {\n                    var key = evt.which;\n                    if (self.isOpen()) {\n                        if (key === KEYS.ESC || key === KEYS.UP && evt.altKey) {\n                            self.close(evt);\n                            evt.preventDefault();\n                        } else if (key === KEYS.ENTER || key === KEYS.TAB) {\n                            self.trigger(\"results:select\", {});\n                            evt.preventDefault();\n                        } else if (key === KEYS.SPACE && evt.ctrlKey) {\n                            self.trigger(\"results:toggle\", {});\n                            evt.preventDefault();\n                        } else if (key === KEYS.UP) {\n                            self.trigger(\"results:previous\", {});\n                            evt.preventDefault();\n                        } else if (key === KEYS.DOWN) {\n                            self.trigger(\"results:next\", {});\n                            evt.preventDefault();\n                        }\n                    } else {\n                        if (key === KEYS.ENTER || key === KEYS.SPACE || key === KEYS.DOWN && evt.altKey) {\n                            self.open();\n                            evt.preventDefault();\n                        }\n                    }\n                });\n            };\n            Select2.prototype._syncAttributes = function() {\n                this.options.set(\"disabled\", this.$element.prop(\"disabled\"));\n                if (this.isDisabled()) {\n                    if (this.isOpen()) {\n                        this.close();\n                    }\n                    this.trigger(\"disable\", {});\n                } else {\n                    this.trigger(\"enable\", {});\n                }\n            };\n            Select2.prototype._isChangeMutation = function(mutations) {\n                var self = this;\n                if (mutations.addedNodes && mutations.addedNodes.length > 0) {\n                    for(var n = 0; n < mutations.addedNodes.length; n++){\n                        var node = mutations.addedNodes[n];\n                        if (node.selected) {\n                            return true;\n                        }\n                    }\n                } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {\n                    return true;\n                } else if (Array.isArray(mutations)) {\n                    return mutations.some(function(mutation) {\n                        return self._isChangeMutation(mutation);\n                    });\n                }\n                return false;\n            };\n            Select2.prototype._syncSubtree = function(mutations) {\n                var changed = this._isChangeMutation(mutations);\n                var self = this;\n                // Only re-pull the data if we think there is a change\n                if (changed) {\n                    this.dataAdapter.current(function(currentData) {\n                        self.trigger(\"selection:update\", {\n                            data: currentData\n                        });\n                    });\n                }\n            };\n            /**\n   * Override the trigger method to automatically trigger pre-events when\n   * there are events that can be prevented.\n   */ Select2.prototype.trigger = function(name, args) {\n                var actualTrigger = Select2.__super__.trigger;\n                var preTriggerMap = {\n                    \"open\": \"opening\",\n                    \"close\": \"closing\",\n                    \"select\": \"selecting\",\n                    \"unselect\": \"unselecting\",\n                    \"clear\": \"clearing\"\n                };\n                if (args === undefined) {\n                    args = {};\n                }\n                if (name in preTriggerMap) {\n                    var preTriggerName = preTriggerMap[name];\n                    var preTriggerArgs = {\n                        prevented: false,\n                        name: name,\n                        args: args\n                    };\n                    actualTrigger.call(this, preTriggerName, preTriggerArgs);\n                    if (preTriggerArgs.prevented) {\n                        args.prevented = true;\n                        return;\n                    }\n                }\n                actualTrigger.call(this, name, args);\n            };\n            Select2.prototype.toggleDropdown = function() {\n                if (this.isDisabled()) {\n                    return;\n                }\n                if (this.isOpen()) {\n                    this.close();\n                } else {\n                    this.open();\n                }\n            };\n            Select2.prototype.open = function() {\n                if (this.isOpen()) {\n                    return;\n                }\n                if (this.isDisabled()) {\n                    return;\n                }\n                this.trigger(\"query\", {});\n            };\n            Select2.prototype.close = function(evt) {\n                if (!this.isOpen()) {\n                    return;\n                }\n                this.trigger(\"close\", {\n                    originalEvent: evt\n                });\n            };\n            /**\n   * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\n   * object.\n   *\n   * @return {true} if the instance is not disabled.\n   * @return {false} if the instance is disabled.\n   */ Select2.prototype.isEnabled = function() {\n                return !this.isDisabled();\n            };\n            /**\n   * Helper method to abstract the \"disabled\" state of this object.\n   *\n   * @return {true} if the disabled option is true.\n   * @return {false} if the disabled option is false.\n   */ Select2.prototype.isDisabled = function() {\n                return this.options.get(\"disabled\");\n            };\n            Select2.prototype.isOpen = function() {\n                return this.$container[0].classList.contains(\"select2-container--open\");\n            };\n            Select2.prototype.hasFocus = function() {\n                return this.$container[0].classList.contains(\"select2-container--focus\");\n            };\n            Select2.prototype.focus = function(data) {\n                // No need to re-trigger focus events if we are already focused\n                if (this.hasFocus()) {\n                    return;\n                }\n                this.$container[0].classList.add(\"select2-container--focus\");\n                this.trigger(\"focus\", {});\n            };\n            Select2.prototype.enable = function(args) {\n                if (this.options.get(\"debug\") && window.console && console.warn) {\n                    console.warn('Select2: The `select2(\"enable\")` method has been deprecated and will' + ' be removed in later Select2 versions. Use $element.prop(\"disabled\")' + \" instead.\");\n                }\n                if (args == null || args.length === 0) {\n                    args = [\n                        true\n                    ];\n                }\n                var disabled = !args[0];\n                this.$element.prop(\"disabled\", disabled);\n            };\n            Select2.prototype.data = function() {\n                if (this.options.get(\"debug\") && arguments.length > 0 && window.console && console.warn) {\n                    console.warn('Select2: Data can no longer be set using `select2(\"data\")`. You ' + \"should consider setting the value instead using `$element.val()`.\");\n                }\n                var data = [];\n                this.dataAdapter.current(function(currentData) {\n                    data = currentData;\n                });\n                return data;\n            };\n            Select2.prototype.val = function(args) {\n                if (this.options.get(\"debug\") && window.console && console.warn) {\n                    console.warn('Select2: The `select2(\"val\")` method has been deprecated and will be' + \" removed in later Select2 versions. Use $element.val() instead.\");\n                }\n                if (args == null || args.length === 0) {\n                    return this.$element.val();\n                }\n                var newVal = args[0];\n                if (Array.isArray(newVal)) {\n                    newVal = newVal.map(function(obj) {\n                        return obj.toString();\n                    });\n                }\n                this.$element.val(newVal).trigger(\"input\").trigger(\"change\");\n            };\n            Select2.prototype.destroy = function() {\n                Utils.RemoveData(this.$container[0]);\n                this.$container.remove();\n                this._observer.disconnect();\n                this._observer = null;\n                this._syncA = null;\n                this._syncS = null;\n                this.$element.off(\".select2\");\n                this.$element.attr(\"tabindex\", Utils.GetData(this.$element[0], \"old-tabindex\"));\n                this.$element[0].classList.remove(\"select2-hidden-accessible\");\n                this.$element.attr(\"aria-hidden\", \"false\");\n                Utils.RemoveData(this.$element[0]);\n                this.$element.removeData(\"select2\");\n                this.dataAdapter.destroy();\n                this.selection.destroy();\n                this.dropdown.destroy();\n                this.results.destroy();\n                this.dataAdapter = null;\n                this.selection = null;\n                this.dropdown = null;\n                this.results = null;\n            };\n            Select2.prototype.render = function() {\n                var $container = $1('<span class=\"select2 select2-container\">' + '<span class=\"selection\"></span>' + '<span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span>' + \"</span>\");\n                $container.attr(\"dir\", this.options.get(\"dir\"));\n                this.$container = $container;\n                this.$container[0].classList.add(\"select2-container--\" + this.options.get(\"theme\"));\n                Utils.StoreData($container[0], \"element\", this.$element);\n                return $container;\n            };\n            return Select2;\n        });\n        S2.define(\"jquery-mousewheel\", [\n            \"jquery\"\n        ], function($1) {\n            // Used to shim jQuery.mousewheel for non-full builds.\n            return $1;\n        });\n        S2.define(\"jquery.select2\", [\n            \"jquery\",\n            \"jquery-mousewheel\",\n            \"./select2/core\",\n            \"./select2/defaults\",\n            \"./select2/utils\"\n        ], function($1, _, Select2, Defaults, Utils) {\n            if ($1.fn.select2 == null) {\n                // All methods that should return the element\n                var thisMethods = [\n                    \"open\",\n                    \"close\",\n                    \"destroy\"\n                ];\n                $1.fn.select2 = function(options) {\n                    options = options || {};\n                    if (typeof options === \"object\") {\n                        this.each(function() {\n                            var instanceOptions = $1.extend(true, {}, options);\n                            var instance = new Select2($1(this), instanceOptions);\n                        });\n                        return this;\n                    } else if (typeof options === \"string\") {\n                        var ret;\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        this.each(function() {\n                            var instance = Utils.GetData(this, \"select2\");\n                            if (instance == null && window.console && console.error) {\n                                console.error(\"The select2('\" + options + \"') method was called on an \" + \"element that is not using Select2.\");\n                            }\n                            ret = instance[options].apply(instance, args);\n                        });\n                        // Check if we should be returning `this`\n                        if (thisMethods.indexOf(options) > -1) {\n                            return this;\n                        }\n                        return ret;\n                    } else {\n                        throw new Error(\"Invalid arguments for Select2: \" + options);\n                    }\n                };\n            }\n            if ($1.fn.select2.defaults == null) {\n                $1.fn.select2.defaults = Defaults;\n            }\n            return Select2;\n        });\n        // Return the AMD loader configuration so it can be used outside of this file\n        return {\n            define: S2.define,\n            require: S2.require\n        };\n    }();\n    // Autoload the jQuery bindings\n    // We know that all of the modules exist above this, so we're safe\n    var select2 = S2.require(\"jquery.select2\");\n    // Hold the AMD module references on the jQuery function that was just loaded\n    // This allows Select2 to use the internal loader outside of this file, such\n    // as in the language files.\n    jQuery1.fn.select2.amd = S2;\n    // Return the Select2 instance for anyone who is importing it.\n    return select2;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/select2/dist/js/select2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/select2/dist/css/select2.min.css":
/*!*******************************************************!*\
  !*** ./node_modules/select2/dist/css/select2.min.css ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"913f9f7b9535\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2VsZWN0Mi9kaXN0L2Nzcy9zZWxlY3QyLm1pbi5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGxpZXMtcG9ydGFsLy4vbm9kZV9tb2R1bGVzL3NlbGVjdDIvZGlzdC9jc3Mvc2VsZWN0Mi5taW4uY3NzPzg0ZmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI5MTNmOWY3Yjk1MzVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/select2/dist/css/select2.min.css\n");

/***/ })

};
;