"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dm-file-uploader";
exports.ids = ["vendor-chunks/dm-file-uploader"];
exports.modules = {

/***/ "(ssr)/./node_modules/dm-file-uploader/src/js/jquery.dm-uploader.js":
/*!********************************************************************!*\
  !*** ./node_modules/dm-file-uploader/src/js/jquery.dm-uploader.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n/*\n * dmUploader - jQuery Ajax File Uploader Widget\n * https://github.com/danielm/uploader\n *\n * Copyright Daniel Morales <daniel85mg@gmail.com>\n * Released under the MIT license.\n * https://github.com/danielm/uploader/blob/master/LICENSE.txt\n *\n * @preserve\n */ /* global define, define, window, document, FormData */ (function(factory) {\n    \"use strict\";\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__(/*! jquery */ \"(ssr)/./node_modules/jquery/dist/jquery.js\")\n        ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(function($) {\n    \"use strict\";\n    var pluginName = \"dmUploader\";\n    var FileStatus = {\n        PENDING: 0,\n        UPLOADING: 1,\n        COMPLETED: 2,\n        FAILED: 3,\n        CANCELLED: 4 //(by the user)\n    };\n    // These are the plugin defaults values\n    var defaults = {\n        auto: true,\n        queue: true,\n        dnd: true,\n        hookDocument: true,\n        multiple: true,\n        url: document.URL,\n        method: \"POST\",\n        extraData: {},\n        headers: {},\n        dataType: null,\n        fieldName: \"file\",\n        maxFileSize: 0,\n        allowedTypes: \"*\",\n        extFilter: null,\n        onInit: function() {},\n        onComplete: function() {},\n        onFallbackMode: function() {},\n        onNewFile: function() {},\n        onBeforeUpload: function() {},\n        onUploadProgress: function() {},\n        onUploadSuccess: function() {},\n        onUploadCanceled: function() {},\n        onUploadError: function() {},\n        onUploadComplete: function() {},\n        onFileTypeError: function() {},\n        onFileSizeError: function() {},\n        onFileExtError: function() {},\n        onDragEnter: function() {},\n        onDragLeave: function() {},\n        onDocumentDragEnter: function() {},\n        onDocumentDragLeave: function() {}\n    };\n    var DmUploaderFile = function(file, widget) {\n        this.data = file;\n        this.widget = widget;\n        this.jqXHR = null;\n        this.status = FileStatus.PENDING;\n        // The file id doesnt have to bo that special.... or not?\n        this.id = Math.random().toString(36).substr(2);\n    };\n    DmUploaderFile.prototype.upload = function() {\n        var file = this;\n        if (!file.canUpload()) {\n            if (file.widget.queueRunning && file.status !== FileStatus.UPLOADING) {\n                file.widget.processQueue();\n            }\n            return false;\n        }\n        // Form Data\n        var fd = new FormData();\n        fd.append(file.widget.settings.fieldName, file.data);\n        // Append extra Form Data\n        var customData = file.widget.settings.extraData;\n        if (typeof customData === \"function\") {\n            customData = customData.call(file.widget.element, file.id);\n        }\n        $.each(customData, function(exKey, exVal) {\n            fd.append(exKey, exVal);\n        });\n        file.status = FileStatus.UPLOADING;\n        file.widget.activeFiles++;\n        file.widget.settings.onBeforeUpload.call(file.widget.element, file.id);\n        // Ajax Submit\n        file.jqXHR = $.ajax({\n            url: file.widget.settings.url,\n            type: file.widget.settings.method,\n            dataType: file.widget.settings.dataType,\n            data: fd,\n            headers: file.widget.settings.headers,\n            cache: false,\n            contentType: false,\n            processData: false,\n            forceSync: false,\n            xhr: function() {\n                return file.getXhr();\n            },\n            success: function(data) {\n                file.onSuccess(data);\n            },\n            error: function(xhr, status, errMsg) {\n                file.onError(xhr, status, errMsg);\n            },\n            complete: function() {\n                file.onComplete();\n            }\n        });\n        return true;\n    };\n    DmUploaderFile.prototype.onSuccess = function(data) {\n        this.status = FileStatus.COMPLETED;\n        this.widget.settings.onUploadSuccess.call(this.widget.element, this.id, data);\n    };\n    DmUploaderFile.prototype.onError = function(xhr, status, errMsg) {\n        // If the status is: cancelled (by the user) don't invoke the error callback\n        if (this.status !== FileStatus.CANCELLED) {\n            this.status = FileStatus.FAILED;\n            this.widget.settings.onUploadError.call(this.widget.element, this.id, xhr, status, errMsg);\n        }\n    };\n    DmUploaderFile.prototype.onComplete = function() {\n        this.widget.activeFiles--;\n        if (this.status !== FileStatus.CANCELLED) {\n            this.widget.settings.onUploadComplete.call(this.widget.element, this.id);\n        }\n        if (this.widget.queueRunning) {\n            this.widget.processQueue();\n        } else if (this.widget.settings.queue && this.widget.activeFiles === 0) {\n            this.widget.settings.onComplete.call(this.element);\n        }\n    };\n    DmUploaderFile.prototype.getXhr = function() {\n        var file = this;\n        var xhrobj = $.ajaxSettings.xhr();\n        if (xhrobj.upload) {\n            xhrobj.upload.addEventListener(\"progress\", function(event) {\n                var percent = 0;\n                var position = event.loaded || event.position;\n                var total = event.total || event.totalSize;\n                if (event.lengthComputable) {\n                    percent = Math.ceil(position / total * 100);\n                }\n                file.widget.settings.onUploadProgress.call(file.widget.element, file.id, percent);\n            }, false);\n        }\n        return xhrobj;\n    };\n    DmUploaderFile.prototype.cancel = function(abort) {\n        // The abort flag is to track if we are calling this function directly (using the cancel Method, by id)\n        // or the call comes from the 'gobal' method aka cancelAll.\n        // THis mean that we don't want to trigger the cancel event on file that isn't uploading, UNLESS directly doing it\n        // ... and yes, it could be done prettier. Review (?)\n        abort = typeof abort === \"undefined\" ? false : abort;\n        var myStatus = this.status;\n        if (myStatus === FileStatus.UPLOADING || abort && myStatus === FileStatus.PENDING) {\n            this.status = FileStatus.CANCELLED;\n        } else {\n            return false;\n        }\n        this.widget.settings.onUploadCanceled.call(this.widget.element, this.id);\n        if (myStatus === FileStatus.UPLOADING) {\n            this.jqXHR.abort();\n        }\n        return true;\n    };\n    DmUploaderFile.prototype.canUpload = function() {\n        return this.status === FileStatus.PENDING || this.status === FileStatus.FAILED;\n    };\n    var DmUploader = function(element, options) {\n        this.element = $(element);\n        this.settings = $.extend({}, defaults, options);\n        if (!this.checkSupport()) {\n            $.error(\"Browser not supported by jQuery.dmUploader\");\n            this.settings.onFallbackMode.call(this.element);\n            return false;\n        }\n        this.init();\n        return this;\n    };\n    DmUploader.prototype.checkSupport = function() {\n        // This one is mandatory for all modes\n        if (typeof window.FormData === \"undefined\") {\n            return false;\n        }\n        // Test based on: Modernizr/feature-detects/forms/fileinput.js\n        var exp = new RegExp(\"/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|\" + \"(Windows Phone (OS 7|8.0))|(XBLWP)|\" + \"(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|\" + \"(Kindle/(1.0|2.0|2.5|3.0))/\");\n        if (exp.test(window.navigator.userAgent)) {\n            return false;\n        }\n        return !$('<input type=\"file\" />').prop(\"disabled\");\n    };\n    DmUploader.prototype.init = function() {\n        var widget = this;\n        // Queue vars\n        this.queue = [];\n        this.queuePos = -1;\n        this.queueRunning = false;\n        this.activeFiles = 0;\n        this.draggingOver = 0;\n        this.draggingOverDoc = 0;\n        var input = widget.element.is(\"input[type=file]\") ? widget.element : widget.element.find(\"input[type=file]\");\n        //-- Is the input our main element itself??\n        if (input.length > 0) {\n            input.prop(\"multiple\", this.settings.multiple);\n            // Or does it has the input as a child\n            input.on(\"change.\" + pluginName, function(evt) {\n                var files = evt.target && evt.target.files;\n                if (!files || !files.length) {\n                    return;\n                }\n                widget.addFiles(files);\n                $(this).val(\"\");\n            });\n        }\n        if (this.settings.dnd) {\n            this.initDnD();\n        }\n        if (input.length === 0 && !this.settings.dnd) {\n            // Trigger an error because if this happens the plugin wont do anything.\n            $.error(\"Markup error found by jQuery.dmUploader\");\n            return null;\n        }\n        // We good to go, tell them!\n        this.settings.onInit.call(this.element);\n        return this;\n    };\n    DmUploader.prototype.initDnD = function() {\n        var widget = this;\n        // -- Now our own Drop\n        widget.element.on(\"drop.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            if (widget.draggingOver > 0) {\n                widget.draggingOver = 0;\n                widget.settings.onDragLeave.call(widget.element);\n            }\n            var dataTransfer = evt.originalEvent && evt.originalEvent.dataTransfer;\n            if (!dataTransfer || !dataTransfer.files || !dataTransfer.files.length) {\n                return;\n            }\n            // Take only the first file if not acepting multiple, this is kinda ugly. Needs Review ?\n            var files = [];\n            if (widget.settings.multiple) {\n                files = dataTransfer.files;\n            } else {\n                files.push(dataTransfer.files[0]);\n            }\n            widget.addFiles(files);\n        });\n        //-- These two events/callbacks are onlt to maybe do some fancy visual stuff\n        widget.element.on(\"dragenter.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            if (widget.draggingOver === 0) {\n                widget.settings.onDragEnter.call(widget.element);\n            }\n            widget.draggingOver++;\n        });\n        widget.element.on(\"dragleave.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            widget.draggingOver--;\n            if (widget.draggingOver === 0) {\n                widget.settings.onDragLeave.call(widget.element);\n            }\n        });\n        if (!widget.settings.hookDocument) {\n            return;\n        }\n        // Adding some off/namepacing to prevent some weird cases when people use multiple instances\n        $(document).off(\"drop.\" + pluginName).on(\"drop.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            if (widget.draggingOverDoc > 0) {\n                widget.draggingOverDoc = 0;\n                widget.settings.onDocumentDragLeave.call(widget.element);\n            }\n        });\n        $(document).off(\"dragenter.\" + pluginName).on(\"dragenter.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            if (widget.draggingOverDoc === 0) {\n                widget.settings.onDocumentDragEnter.call(widget.element);\n            }\n            widget.draggingOverDoc++;\n        });\n        $(document).off(\"dragleave.\" + pluginName).on(\"dragleave.\" + pluginName, function(evt) {\n            evt.preventDefault();\n            widget.draggingOverDoc--;\n            if (widget.draggingOverDoc === 0) {\n                widget.settings.onDocumentDragLeave.call(widget.element);\n            }\n        });\n        $(document).off(\"dragover.\" + pluginName).on(\"dragover.\" + pluginName, function(evt) {\n            evt.preventDefault();\n        });\n    };\n    DmUploader.prototype.releaseEvents = function() {\n        // Leave everyone ALONE ;_;\n        this.element.off(\".\" + pluginName);\n        this.element.find(\"input[type=file]\").off(\".\" + pluginName);\n        if (this.settings.hookDocument) {\n            $(document).off(\".\" + pluginName);\n        }\n    };\n    DmUploader.prototype.validateFile = function(file) {\n        // Check file size\n        if (this.settings.maxFileSize > 0 && file.size > this.settings.maxFileSize) {\n            this.settings.onFileSizeError.call(this.element, file);\n            return false;\n        }\n        // Check file type\n        if (this.settings.allowedTypes !== \"*\" && !file.type.match(this.settings.allowedTypes)) {\n            this.settings.onFileTypeError.call(this.element, file);\n            return false;\n        }\n        // Check file extension\n        if (this.settings.extFilter !== null) {\n            var ext = file.name.toLowerCase().split(\".\").pop();\n            if ($.inArray(ext, this.settings.extFilter) < 0) {\n                this.settings.onFileExtError.call(this.element, file);\n                return false;\n            }\n        }\n        return new DmUploaderFile(file, this);\n    };\n    DmUploader.prototype.addFiles = function(files) {\n        var nFiles = 0;\n        for(var i = 0; i < files.length; i++){\n            var file = this.validateFile(files[i]);\n            if (!file) {\n                continue;\n            }\n            // If the callback returns false file will not be processed. This may allow some customization\n            var can_continue = this.settings.onNewFile.call(this.element, file.id, file.data);\n            if (can_continue === false) {\n                continue;\n            }\n            // If we are using automatic uploading, and not a file queue: go for the upload\n            if (this.settings.auto && !this.settings.queue) {\n                file.upload();\n            }\n            this.queue.push(file);\n            nFiles++;\n        }\n        // No files were added\n        if (nFiles === 0) {\n            return this;\n        }\n        // Are we auto-uploading files?\n        if (this.settings.auto && this.settings.queue && !this.queueRunning) {\n            this.processQueue();\n        }\n        return this;\n    };\n    DmUploader.prototype.processQueue = function() {\n        this.queuePos++;\n        if (this.queuePos >= this.queue.length) {\n            if (this.activeFiles === 0) {\n                this.settings.onComplete.call(this.element);\n            }\n            // Wait until new files are droped\n            this.queuePos = this.queue.length - 1;\n            this.queueRunning = false;\n            return false;\n        }\n        this.queueRunning = true;\n        // Start next file\n        return this.queue[this.queuePos].upload();\n    };\n    DmUploader.prototype.restartQueue = function() {\n        this.queuePos = -1;\n        this.queueRunning = false;\n        this.processQueue();\n    };\n    DmUploader.prototype.findById = function(id) {\n        var r = false;\n        for(var i = 0; i < this.queue.length; i++){\n            if (this.queue[i].id === id) {\n                r = this.queue[i];\n                break;\n            }\n        }\n        return r;\n    };\n    DmUploader.prototype.cancelAll = function() {\n        var queueWasRunning = this.queueRunning;\n        this.queueRunning = false;\n        // cancel 'em all\n        for(var i = 0; i < this.queue.length; i++){\n            this.queue[i].cancel();\n        }\n        if (queueWasRunning) {\n            this.settings.onComplete.call(this.element);\n        }\n    };\n    DmUploader.prototype.startAll = function() {\n        if (this.settings.queue) {\n            // Resume queue\n            this.restartQueue();\n        } else {\n            // or upload them all\n            for(var i = 0; i < this.queue.length; i++){\n                this.queue[i].upload();\n            }\n        }\n    };\n    // Public API methods\n    DmUploader.prototype.methods = {\n        start: function(id) {\n            if (this.queueRunning) {\n                // Do not allow to manually upload Files when a queue is running\n                return false;\n            }\n            var file = false;\n            if (typeof id !== \"undefined\") {\n                file = this.findById(id);\n                if (!file) {\n                    // File not found in stack\n                    $.error(\"File not found in jQuery.dmUploader\");\n                    return false;\n                }\n            }\n            // Trying to Start an upload by ID\n            if (file) {\n                if (file.status === FileStatus.CANCELLED) {\n                    file.status = FileStatus.PENDING;\n                }\n                return file.upload();\n            }\n            // With no id provided...\n            this.startAll();\n            return true;\n        },\n        cancel: function(id) {\n            var file = false;\n            if (typeof id !== \"undefined\") {\n                file = this.findById(id);\n                if (!file) {\n                    // File not found in stack\n                    $.error(\"File not found in jQuery.dmUploader\");\n                    return false;\n                }\n            }\n            if (file) {\n                return file.cancel(true);\n            }\n            // With no id provided...\n            this.cancelAll();\n            return true;\n        },\n        reset: function() {\n            this.cancelAll();\n            this.queue = [];\n            this.queuePos = -1;\n            this.activeFiles = 0;\n            return true;\n        },\n        destroy: function() {\n            this.cancelAll();\n            this.releaseEvents();\n            this.element.removeData(pluginName);\n        }\n    };\n    $.fn.dmUploader = function(options) {\n        var args = arguments;\n        if (typeof options === \"string\") {\n            this.each(function() {\n                var plugin = $.data(this, pluginName);\n                if (plugin instanceof DmUploader) {\n                    if (typeof plugin.methods[options] === \"function\") {\n                        plugin.methods[options].apply(plugin, Array.prototype.slice.call(args, 1));\n                    } else {\n                        $.error(\"Method \" + options + \" does not exist in jQuery.dmUploader\");\n                    }\n                } else {\n                    $.error(\"Unknown plugin data found by jQuery.dmUploader\");\n                }\n            });\n        } else {\n            return this.each(function() {\n                if (!$.data(this, pluginName)) {\n                    $.data(this, pluginName, new DmUploader(this, options));\n                }\n            });\n        }\n    };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG0tZmlsZS11cGxvYWRlci9zcmMvanMvanF1ZXJ5LmRtLXVwbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7O0NBU0MsR0FFRCxxREFBcUQsR0FFcEQsVUFBU0EsT0FBTztJQUNmO0lBQ0EsSUFBSSxJQUEwQyxFQUFFO1FBQzlDLHdDQUF3QztRQUN4Q0MsaUNBQU87WUFBQywrRUFBUTtTQUFDLG9DQUFFRCxPQUFPQTtBQUFBO0FBQUE7QUFBQSxrR0FBQ0E7SUFDN0IsT0FBTyxFQUtOO0FBQ0gsR0FBRSxTQUFTUSxDQUFDO0lBQ1Y7SUFFQSxJQUFJQyxhQUFhO0lBRWpCLElBQUlDLGFBQWE7UUFDZkMsU0FBUztRQUNUQyxXQUFXO1FBQ1hDLFdBQVc7UUFDWEMsUUFBUTtRQUNSQyxXQUFXLEVBQUUsZUFBZTtJQUM5QjtJQUVBLHVDQUF1QztJQUN2QyxJQUFJQyxXQUFXO1FBQ2JDLE1BQU07UUFDTkMsT0FBTztRQUNQQyxLQUFLO1FBQ0xDLGNBQWM7UUFDZEMsVUFBVTtRQUNWQyxLQUFLQyxTQUFTQyxHQUFHO1FBQ2pCQyxRQUFRO1FBQ1JDLFdBQVcsQ0FBQztRQUNaQyxTQUFTLENBQUM7UUFDVkMsVUFBVTtRQUNWQyxXQUFXO1FBQ1hDLGFBQWE7UUFDYkMsY0FBYztRQUNkQyxXQUFXO1FBQ1hDLFFBQVEsWUFBVztRQUNuQkMsWUFBWSxZQUFXO1FBQ3ZCQyxnQkFBZ0IsWUFBWTtRQUM1QkMsV0FBVyxZQUFXO1FBQ3RCQyxnQkFBZ0IsWUFBVztRQUMzQkMsa0JBQWtCLFlBQVc7UUFDN0JDLGlCQUFpQixZQUFXO1FBQzVCQyxrQkFBa0IsWUFBVztRQUM3QkMsZUFBZSxZQUFXO1FBQzFCQyxrQkFBa0IsWUFBVztRQUM3QkMsaUJBQWlCLFlBQVc7UUFDNUJDLGlCQUFpQixZQUFXO1FBQzVCQyxnQkFBZ0IsWUFBVztRQUMzQkMsYUFBYSxZQUFXO1FBQ3hCQyxhQUFhLFlBQVc7UUFDeEJDLHFCQUFxQixZQUFXO1FBQ2hD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QUNDLFVBQVUsR0FBRyxTQUFTdEQsT0FBTztRQUNoQyxJQUFJdUQsT0FBT0M7UUFFWCxJQUFJLE9BQU94RCxZQUFZLFVBQVU7WUFDL0IsSUFBSSxDQUFDakMsSUFBSSxDQUFDO2dCQUNSLElBQUkwRixTQUFTM0osRUFBRTZDLElBQUksQ0FBQyxJQUFJLEVBQUU1QztnQkFFMUIsSUFBSTBKLGtCQUFrQjFELFlBQVk7b0JBQ2hDLElBQUksT0FBTzBELE9BQU9ULE9BQU8sQ0FBQ2hELFFBQVEsS0FBSyxZQUFZO3dCQUNqRHlELE9BQU9ULE9BQU8sQ0FBQ2hELFFBQVEsQ0FBQzBELEtBQUssQ0FBQ0QsUUFBUUUsTUFBTXhHLFNBQVMsQ0FBQ3lHLEtBQUssQ0FBQy9GLElBQUksQ0FBQzBGLE1BQU07b0JBQ3pFLE9BQU87d0JBQ0x6SixFQUFFK0UsS0FBSyxDQUFDLFlBQWFtQixVQUFVO29CQUNqQztnQkFDRixPQUFPO29CQUNMbEcsRUFBRStFLEtBQUssQ0FBQztnQkFDVjtZQUNGO1FBQ0YsT0FBTztZQUNMLE9BQU8sSUFBSSxDQUFDZCxJQUFJLENBQUM7Z0JBQ2YsSUFBSSxDQUFDakUsRUFBRTZDLElBQUksQ0FBQyxJQUFJLEVBQUU1QyxhQUFhO29CQUM3QkQsRUFBRTZDLElBQUksQ0FBQyxJQUFJLEVBQUU1QyxZQUFZLElBQUlnRyxXQUFXLElBQUksRUFBRUM7Z0JBQ2hEO1lBQ0Y7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbGxpZXMtcG9ydGFsLy4vbm9kZV9tb2R1bGVzL2RtLWZpbGUtdXBsb2FkZXIvc3JjL2pzL2pxdWVyeS5kbS11cGxvYWRlci5qcz82OTcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBkbVVwbG9hZGVyIC0galF1ZXJ5IEFqYXggRmlsZSBVcGxvYWRlciBXaWRnZXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxtL3VwbG9hZGVyXG4gKlxuICogQ29weXJpZ2h0IERhbmllbCBNb3JhbGVzIDxkYW5pZWw4NW1nQGdtYWlsLmNvbT5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxtL3VwbG9hZGVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UudHh0XG4gKlxuICogQHByZXNlcnZlXG4gKi9cblxuLyogZ2xvYmFsIGRlZmluZSwgZGVmaW5lLCB3aW5kb3csIGRvY3VtZW50LCBGb3JtRGF0YSAqL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbXCJqcXVlcnlcIl0sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJqcXVlcnlcIikpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgIGZhY3Rvcnkod2luZG93LmpRdWVyeSk7XG4gIH1cbn0oZnVuY3Rpb24oJCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgcGx1Z2luTmFtZSA9IFwiZG1VcGxvYWRlclwiO1xuXG4gIHZhciBGaWxlU3RhdHVzID0ge1xuICAgIFBFTkRJTkc6IDAsXG4gICAgVVBMT0FESU5HOiAxLFxuICAgIENPTVBMRVRFRDogMixcbiAgICBGQUlMRUQ6IDMsXG4gICAgQ0FOQ0VMTEVEOiA0IC8vKGJ5IHRoZSB1c2VyKVxuICB9O1xuXG4gIC8vIFRoZXNlIGFyZSB0aGUgcGx1Z2luIGRlZmF1bHRzIHZhbHVlc1xuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgYXV0bzogdHJ1ZSxcbiAgICBxdWV1ZTogdHJ1ZSxcbiAgICBkbmQ6IHRydWUsXG4gICAgaG9va0RvY3VtZW50OiB0cnVlLFxuICAgIG11bHRpcGxlOiB0cnVlLFxuICAgIHVybDogZG9jdW1lbnQuVVJMLFxuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgZXh0cmFEYXRhOiB7fSxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBkYXRhVHlwZTogbnVsbCxcbiAgICBmaWVsZE5hbWU6IFwiZmlsZVwiLFxuICAgIG1heEZpbGVTaXplOiAwLFxuICAgIGFsbG93ZWRUeXBlczogXCIqXCIsXG4gICAgZXh0RmlsdGVyOiBudWxsLFxuICAgIG9uSW5pdDogZnVuY3Rpb24oKXt9LFxuICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCl7fSxcbiAgICBvbkZhbGxiYWNrTW9kZTogZnVuY3Rpb24oKSB7fSxcbiAgICBvbk5ld0ZpbGU6IGZ1bmN0aW9uKCl7fSwgICAgICAgIC8vcGFyYW1zOiBpZCwgZmlsZVxuICAgIG9uQmVmb3JlVXBsb2FkOiBmdW5jdGlvbigpe30sICAgLy9wYXJhbXM6IGlkXG4gICAgb25VcGxvYWRQcm9ncmVzczogZnVuY3Rpb24oKXt9LCAvL3BhcmFtczogaWQsIHBlcmNlbnRcbiAgICBvblVwbG9hZFN1Y2Nlc3M6IGZ1bmN0aW9uKCl7fSwgIC8vcGFyYW1zOiBpZCwgZGF0YVxuICAgIG9uVXBsb2FkQ2FuY2VsZWQ6IGZ1bmN0aW9uKCl7fSwgLy9wYXJhbXM6IGlkXG4gICAgb25VcGxvYWRFcnJvcjogZnVuY3Rpb24oKXt9LCAgICAvL3BhcmFtczogaWQsIHhociwgc3RhdHVzLCBtZXNzYWdlXG4gICAgb25VcGxvYWRDb21wbGV0ZTogZnVuY3Rpb24oKXt9LCAvL3BhcmFtczogaWRcbiAgICBvbkZpbGVUeXBlRXJyb3I6IGZ1bmN0aW9uKCl7fSwgIC8vcGFyYW1zOiBmaWxlXG4gICAgb25GaWxlU2l6ZUVycm9yOiBmdW5jdGlvbigpe30sICAvL3BhcmFtczogZmlsZVxuICAgIG9uRmlsZUV4dEVycm9yOiBmdW5jdGlvbigpe30sICAgLy9wYXJhbXM6IGZpbGVcbiAgICBvbkRyYWdFbnRlcjogZnVuY3Rpb24oKXt9LFxuICAgIG9uRHJhZ0xlYXZlOiBmdW5jdGlvbigpe30sXG4gICAgb25Eb2N1bWVudERyYWdFbnRlcjogZnVuY3Rpb24oKXt9LFxuICAgIG9uRG9jdW1lbnREcmFnTGVhdmU6IGZ1bmN0aW9uKCl7fVxuICB9O1xuICBcbiAgdmFyIERtVXBsb2FkZXJGaWxlID0gZnVuY3Rpb24oZmlsZSwgd2lkZ2V0KVxuICB7XG4gICAgdGhpcy5kYXRhID0gZmlsZTtcblxuICAgIHRoaXMud2lkZ2V0ID0gd2lkZ2V0O1xuXG4gICAgdGhpcy5qcVhIUiA9IG51bGw7XG5cbiAgICB0aGlzLnN0YXR1cyA9IEZpbGVTdGF0dXMuUEVORElORztcblxuICAgIC8vIFRoZSBmaWxlIGlkIGRvZXNudCBoYXZlIHRvIGJvIHRoYXQgc3BlY2lhbC4uLi4gb3Igbm90P1xuICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMik7XG4gIH07XG5cbiAgRG1VcGxvYWRlckZpbGUucHJvdG90eXBlLnVwbG9hZCA9IGZ1bmN0aW9uKClcbiAge1xuICAgIHZhciBmaWxlID0gdGhpcztcblxuICAgIGlmICghZmlsZS5jYW5VcGxvYWQoKSkge1xuXG4gICAgICBpZiAoZmlsZS53aWRnZXQucXVldWVSdW5uaW5nICYmIGZpbGUuc3RhdHVzICE9PSBGaWxlU3RhdHVzLlVQTE9BRElORykge1xuICAgICAgICBmaWxlLndpZGdldC5wcm9jZXNzUXVldWUoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEZvcm0gRGF0YVxuICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZkLmFwcGVuZChmaWxlLndpZGdldC5zZXR0aW5ncy5maWVsZE5hbWUsIGZpbGUuZGF0YSk7XG5cbiAgICAvLyBBcHBlbmQgZXh0cmEgRm9ybSBEYXRhXG4gICAgdmFyIGN1c3RvbURhdGEgPSBmaWxlLndpZGdldC5zZXR0aW5ncy5leHRyYURhdGE7XG4gICAgaWYgKHR5cGVvZihjdXN0b21EYXRhKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjdXN0b21EYXRhID0gY3VzdG9tRGF0YS5jYWxsKGZpbGUud2lkZ2V0LmVsZW1lbnQsIGZpbGUuaWQpO1xuICAgIH1cblxuICAgICQuZWFjaChjdXN0b21EYXRhLCBmdW5jdGlvbihleEtleSwgZXhWYWwpIHtcbiAgICAgIGZkLmFwcGVuZChleEtleSwgZXhWYWwpO1xuICAgIH0pO1xuXG4gICAgZmlsZS5zdGF0dXMgPSBGaWxlU3RhdHVzLlVQTE9BRElORztcbiAgICBmaWxlLndpZGdldC5hY3RpdmVGaWxlcysrO1xuXG4gICAgZmlsZS53aWRnZXQuc2V0dGluZ3Mub25CZWZvcmVVcGxvYWQuY2FsbChmaWxlLndpZGdldC5lbGVtZW50LCBmaWxlLmlkKTtcblxuICAgIC8vIEFqYXggU3VibWl0XG4gICAgZmlsZS5qcVhIUiA9ICQuYWpheCh7XG4gICAgICB1cmw6IGZpbGUud2lkZ2V0LnNldHRpbmdzLnVybCxcbiAgICAgIHR5cGU6IGZpbGUud2lkZ2V0LnNldHRpbmdzLm1ldGhvZCxcbiAgICAgIGRhdGFUeXBlOiBmaWxlLndpZGdldC5zZXR0aW5ncy5kYXRhVHlwZSxcbiAgICAgIGRhdGE6IGZkLFxuICAgICAgaGVhZGVyczogZmlsZS53aWRnZXQuc2V0dGluZ3MuaGVhZGVycyxcbiAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICAgIGZvcmNlU3luYzogZmFsc2UsXG4gICAgICB4aHI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmlsZS5nZXRYaHIoKTsgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHsgZmlsZS5vblN1Y2Nlc3MoZGF0YSk7IH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVyck1zZykgeyBmaWxlLm9uRXJyb3IoeGhyLCBzdGF0dXMsIGVyck1zZyk7IH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7IGZpbGUub25Db21wbGV0ZSgpOyB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRG1VcGxvYWRlckZpbGUucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uKGRhdGEpXG4gIHtcbiAgICB0aGlzLnN0YXR1cyA9IEZpbGVTdGF0dXMuQ09NUExFVEVEO1xuICAgIHRoaXMud2lkZ2V0LnNldHRpbmdzLm9uVXBsb2FkU3VjY2Vzcy5jYWxsKHRoaXMud2lkZ2V0LmVsZW1lbnQsIHRoaXMuaWQsIGRhdGEpO1xuICB9O1xuXG4gIERtVXBsb2FkZXJGaWxlLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24oeGhyLCBzdGF0dXMsIGVyck1zZylcbiAge1xuICAgIC8vIElmIHRoZSBzdGF0dXMgaXM6IGNhbmNlbGxlZCAoYnkgdGhlIHVzZXIpIGRvbid0IGludm9rZSB0aGUgZXJyb3IgY2FsbGJhY2tcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IEZpbGVTdGF0dXMuQ0FOQ0VMTEVEKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IEZpbGVTdGF0dXMuRkFJTEVEO1xuICAgICAgdGhpcy53aWRnZXQuc2V0dGluZ3Mub25VcGxvYWRFcnJvci5jYWxsKHRoaXMud2lkZ2V0LmVsZW1lbnQsIHRoaXMuaWQsIHhociwgc3RhdHVzLCBlcnJNc2cpO1xuICAgIH1cbiAgfTtcblxuICBEbVVwbG9hZGVyRmlsZS5wcm90b3R5cGUub25Db21wbGV0ZSA9IGZ1bmN0aW9uKClcbiAge1xuICAgIHRoaXMud2lkZ2V0LmFjdGl2ZUZpbGVzLS07XG5cbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IEZpbGVTdGF0dXMuQ0FOQ0VMTEVEKSB7XG4gICAgICB0aGlzLndpZGdldC5zZXR0aW5ncy5vblVwbG9hZENvbXBsZXRlLmNhbGwodGhpcy53aWRnZXQuZWxlbWVudCwgdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMud2lkZ2V0LnF1ZXVlUnVubmluZykge1xuICAgICAgdGhpcy53aWRnZXQucHJvY2Vzc1F1ZXVlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLndpZGdldC5zZXR0aW5ncy5xdWV1ZSAmJiB0aGlzLndpZGdldC5hY3RpdmVGaWxlcyA9PT0gMCkge1xuICAgICAgdGhpcy53aWRnZXQuc2V0dGluZ3Mub25Db21wbGV0ZS5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIERtVXBsb2FkZXJGaWxlLnByb3RvdHlwZS5nZXRYaHIgPSBmdW5jdGlvbigpXG4gIHtcbiAgICB2YXIgZmlsZSA9IHRoaXM7XG4gICAgdmFyIHhocm9iaiA9ICQuYWpheFNldHRpbmdzLnhocigpO1xuXG4gICAgaWYgKHhocm9iai51cGxvYWQpIHtcbiAgICAgIHhocm9iai51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwZXJjZW50ID0gMDtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZXZlbnQubG9hZGVkIHx8IGV2ZW50LnBvc2l0aW9uO1xuICAgICAgICB2YXIgdG90YWwgPSBldmVudC50b3RhbCB8fCBldmVudC50b3RhbFNpemU7XG5cbiAgICAgICAgaWYgKGV2ZW50Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICBwZXJjZW50ID0gTWF0aC5jZWlsKHBvc2l0aW9uIC8gdG90YWwgKiAxMDApO1xuICAgICAgICB9XG4gICAgICAgIGZpbGUud2lkZ2V0LnNldHRpbmdzLm9uVXBsb2FkUHJvZ3Jlc3MuY2FsbChmaWxlLndpZGdldC5lbGVtZW50LCBmaWxlLmlkLCBwZXJjZW50KTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4geGhyb2JqO1xuICB9O1xuXG4gIERtVXBsb2FkZXJGaWxlLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbihhYm9ydClcbiAge1xuICAgIC8vIFRoZSBhYm9ydCBmbGFnIGlzIHRvIHRyYWNrIGlmIHdlIGFyZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gZGlyZWN0bHkgKHVzaW5nIHRoZSBjYW5jZWwgTWV0aG9kLCBieSBpZClcbiAgICAvLyBvciB0aGUgY2FsbCBjb21lcyBmcm9tIHRoZSAnZ29iYWwnIG1ldGhvZCBha2EgY2FuY2VsQWxsLlxuICAgIC8vIFRIaXMgbWVhbiB0aGF0IHdlIGRvbid0IHdhbnQgdG8gdHJpZ2dlciB0aGUgY2FuY2VsIGV2ZW50IG9uIGZpbGUgdGhhdCBpc24ndCB1cGxvYWRpbmcsIFVOTEVTUyBkaXJlY3RseSBkb2luZyBpdFxuICAgIC8vIC4uLiBhbmQgeWVzLCBpdCBjb3VsZCBiZSBkb25lIHByZXR0aWVyLiBSZXZpZXcgKD8pXG4gICAgYWJvcnQgPSAodHlwZW9mIGFib3J0ID09PSBcInVuZGVmaW5lZFwiID8gZmFsc2UgOiBhYm9ydCk7XG5cbiAgICB2YXIgbXlTdGF0dXMgPSB0aGlzLnN0YXR1cztcblxuICAgIGlmIChteVN0YXR1cyA9PT0gRmlsZVN0YXR1cy5VUExPQURJTkcgfHwgKGFib3J0ICYmIG15U3RhdHVzID09PSBGaWxlU3RhdHVzLlBFTkRJTkcpKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IEZpbGVTdGF0dXMuQ0FOQ0VMTEVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy53aWRnZXQuc2V0dGluZ3Mub25VcGxvYWRDYW5jZWxlZC5jYWxsKHRoaXMud2lkZ2V0LmVsZW1lbnQsIHRoaXMuaWQpO1xuXG4gICAgaWYgKG15U3RhdHVzID09PSBGaWxlU3RhdHVzLlVQTE9BRElORykge1xuICAgICAgdGhpcy5qcVhIUi5hYm9ydCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIERtVXBsb2FkZXJGaWxlLnByb3RvdHlwZS5jYW5VcGxvYWQgPSBmdW5jdGlvbigpXG4gIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5zdGF0dXMgPT09IEZpbGVTdGF0dXMuUEVORElORyB8fFxuICAgICAgdGhpcy5zdGF0dXMgPT09IEZpbGVTdGF0dXMuRkFJTEVEXG4gICAgKTtcbiAgfTtcblxuICB2YXIgRG1VcGxvYWRlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpXG4gIHtcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMuc2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKCF0aGlzLmNoZWNrU3VwcG9ydCgpKSB7XG4gICAgICAkLmVycm9yKFwiQnJvd3NlciBub3Qgc3VwcG9ydGVkIGJ5IGpRdWVyeS5kbVVwbG9hZGVyXCIpO1xuXG4gICAgICB0aGlzLnNldHRpbmdzLm9uRmFsbGJhY2tNb2RlLmNhbGwodGhpcy5lbGVtZW50KTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgRG1VcGxvYWRlci5wcm90b3R5cGUuY2hlY2tTdXBwb3J0ID0gZnVuY3Rpb24oKVxuICB7XG4gICAgLy8gVGhpcyBvbmUgaXMgbWFuZGF0b3J5IGZvciBhbGwgbW9kZXNcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5Gb3JtRGF0YSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRlc3QgYmFzZWQgb246IE1vZGVybml6ci9mZWF0dXJlLWRldGVjdHMvZm9ybXMvZmlsZWlucHV0LmpzXG4gICAgdmFyIGV4cCA9IG5ldyBSZWdFeHAoXG4gICAgICBcIi8oQW5kcm9pZCAoMS4wfDEuMXwxLjV8MS42fDIuMHwyLjEpKXxcIitcbiAgICAgIFwiKFdpbmRvd3MgUGhvbmUgKE9TIDd8OC4wKSl8KFhCTFdQKXxcIitcbiAgICAgIFwiKFp1bmVXUCl8KHcoZWIpP09TQnJvd3Nlcil8KHdlYk9TKXxcIitcbiAgICAgIFwiKEtpbmRsZVxcLygxLjB8Mi4wfDIuNXwzLjApKS9cIik7XG5cbiAgICBpZiAoZXhwLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuICEkKFwiPGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIC8+XCIpLnByb3AoXCJkaXNhYmxlZFwiKTtcbiAgfTtcblxuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKVxuICB7XG4gICAgdmFyIHdpZGdldCA9IHRoaXM7XG5cbiAgICAvLyBRdWV1ZSB2YXJzXG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHRoaXMucXVldWVQb3MgPSAtMTtcbiAgICB0aGlzLnF1ZXVlUnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuYWN0aXZlRmlsZXMgPSAwO1xuICAgIHRoaXMuZHJhZ2dpbmdPdmVyID0gMDtcbiAgICB0aGlzLmRyYWdnaW5nT3ZlckRvYyA9IDA7XG5cbiAgICB2YXIgaW5wdXQgPSB3aWRnZXQuZWxlbWVudC5pcyhcImlucHV0W3R5cGU9ZmlsZV1cIikgP1xuICAgICAgd2lkZ2V0LmVsZW1lbnQgOiB3aWRnZXQuZWxlbWVudC5maW5kKFwiaW5wdXRbdHlwZT1maWxlXVwiKTtcblxuICAgIC8vLS0gSXMgdGhlIGlucHV0IG91ciBtYWluIGVsZW1lbnQgaXRzZWxmPz9cbiAgICBpZiAoaW5wdXQubGVuZ3RoID4gMCkge1xuICAgICAgaW5wdXQucHJvcChcIm11bHRpcGxlXCIsIHRoaXMuc2V0dGluZ3MubXVsdGlwbGUpO1xuXG4gICAgICAvLyBPciBkb2VzIGl0IGhhcyB0aGUgaW5wdXQgYXMgYSBjaGlsZFxuICAgICAgaW5wdXQub24oXCJjaGFuZ2UuXCIgKyBwbHVnaW5OYW1lLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgdmFyIGZpbGVzID0gZXZ0LnRhcmdldCAmJiBldnQudGFyZ2V0LmZpbGVzO1xuXG4gICAgICAgIGlmICghZmlsZXMgfHwgIWZpbGVzLmxlbmd0aCl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgd2lkZ2V0LmFkZEZpbGVzKGZpbGVzKTtcblxuICAgICAgICAkKHRoaXMpLnZhbChcIlwiKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNldHRpbmdzLmRuZCkge1xuICAgICAgdGhpcy5pbml0RG5EKCk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5zZXR0aW5ncy5kbmQpIHtcbiAgICAgIC8vIFRyaWdnZXIgYW4gZXJyb3IgYmVjYXVzZSBpZiB0aGlzIGhhcHBlbnMgdGhlIHBsdWdpbiB3b250IGRvIGFueXRoaW5nLlxuICAgICAgJC5lcnJvcihcIk1hcmt1cCBlcnJvciBmb3VuZCBieSBqUXVlcnkuZG1VcGxvYWRlclwiKTtcblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gV2UgZ29vZCB0byBnbywgdGVsbCB0aGVtIVxuICAgIHRoaXMuc2V0dGluZ3Mub25Jbml0LmNhbGwodGhpcy5lbGVtZW50KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIERtVXBsb2FkZXIucHJvdG90eXBlLmluaXREbkQgPSBmdW5jdGlvbigpXG4gIHtcbiAgICB2YXIgd2lkZ2V0ID0gdGhpcztcblxuICAgIC8vIC0tIE5vdyBvdXIgb3duIERyb3BcbiAgICB3aWRnZXQuZWxlbWVudC5vbihcImRyb3AuXCIgKyBwbHVnaW5OYW1lLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKHdpZGdldC5kcmFnZ2luZ092ZXIgPiAwKXtcbiAgICAgICAgd2lkZ2V0LmRyYWdnaW5nT3ZlciA9IDA7XG4gICAgICAgIHdpZGdldC5zZXR0aW5ncy5vbkRyYWdMZWF2ZS5jYWxsKHdpZGdldC5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGFUcmFuc2ZlciA9IGV2dC5vcmlnaW5hbEV2ZW50ICYmIGV2dC5vcmlnaW5hbEV2ZW50LmRhdGFUcmFuc2ZlcjtcbiAgICAgIGlmICghZGF0YVRyYW5zZmVyIHx8ICFkYXRhVHJhbnNmZXIuZmlsZXMgfHwgIWRhdGFUcmFuc2Zlci5maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUYWtlIG9ubHkgdGhlIGZpcnN0IGZpbGUgaWYgbm90IGFjZXB0aW5nIG11bHRpcGxlLCB0aGlzIGlzIGtpbmRhIHVnbHkuIE5lZWRzIFJldmlldyA/XG4gICAgICB2YXIgZmlsZXMgPSBbXTtcblxuICAgICAgaWYgKHdpZGdldC5zZXR0aW5ncy5tdWx0aXBsZSkge1xuICAgICAgICBmaWxlcyA9IGRhdGFUcmFuc2Zlci5maWxlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVzLnB1c2goZGF0YVRyYW5zZmVyLmZpbGVzWzBdKTtcbiAgICAgIH1cblxuICAgICAgd2lkZ2V0LmFkZEZpbGVzKGZpbGVzKTtcbiAgICB9KTtcblxuICAgIC8vLS0gVGhlc2UgdHdvIGV2ZW50cy9jYWxsYmFja3MgYXJlIG9ubHQgdG8gbWF5YmUgZG8gc29tZSBmYW5jeSB2aXN1YWwgc3R1ZmZcbiAgICB3aWRnZXQuZWxlbWVudC5vbihcImRyYWdlbnRlci5cIiArIHBsdWdpbk5hbWUsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh3aWRnZXQuZHJhZ2dpbmdPdmVyID09PSAwKXtcbiAgICAgICAgd2lkZ2V0LnNldHRpbmdzLm9uRHJhZ0VudGVyLmNhbGwod2lkZ2V0LmVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB3aWRnZXQuZHJhZ2dpbmdPdmVyKys7XG4gICAgfSk7XG5cbiAgICB3aWRnZXQuZWxlbWVudC5vbihcImRyYWdsZWF2ZS5cIiArIHBsdWdpbk5hbWUsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHdpZGdldC5kcmFnZ2luZ092ZXItLTtcblxuICAgICAgaWYgKHdpZGdldC5kcmFnZ2luZ092ZXIgPT09IDApe1xuICAgICAgICB3aWRnZXQuc2V0dGluZ3Mub25EcmFnTGVhdmUuY2FsbCh3aWRnZXQuZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXdpZGdldC5zZXR0aW5ncy5ob29rRG9jdW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBBZGRpbmcgc29tZSBvZmYvbmFtZXBhY2luZyB0byBwcmV2ZW50IHNvbWUgd2VpcmQgY2FzZXMgd2hlbiBwZW9wbGUgdXNlIG11bHRpcGxlIGluc3RhbmNlc1xuICAgICQoZG9jdW1lbnQpLm9mZihcImRyb3AuXCIgKyBwbHVnaW5OYW1lKS5vbihcImRyb3AuXCIgKyBwbHVnaW5OYW1lLCBmdW5jdGlvbihldnQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAod2lkZ2V0LmRyYWdnaW5nT3ZlckRvYyA+IDApe1xuICAgICAgICB3aWRnZXQuZHJhZ2dpbmdPdmVyRG9jID0gMDtcbiAgICAgICAgd2lkZ2V0LnNldHRpbmdzLm9uRG9jdW1lbnREcmFnTGVhdmUuY2FsbCh3aWRnZXQuZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vZmYoXCJkcmFnZW50ZXIuXCIgKyBwbHVnaW5OYW1lKS5vbihcImRyYWdlbnRlci5cIiArIHBsdWdpbk5hbWUsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh3aWRnZXQuZHJhZ2dpbmdPdmVyRG9jID09PSAwKXtcbiAgICAgICAgd2lkZ2V0LnNldHRpbmdzLm9uRG9jdW1lbnREcmFnRW50ZXIuY2FsbCh3aWRnZXQuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHdpZGdldC5kcmFnZ2luZ092ZXJEb2MrKztcbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9mZihcImRyYWdsZWF2ZS5cIiArIHBsdWdpbk5hbWUpLm9uKFwiZHJhZ2xlYXZlLlwiICsgcGx1Z2luTmFtZSwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgd2lkZ2V0LmRyYWdnaW5nT3ZlckRvYy0tO1xuXG4gICAgICBpZiAod2lkZ2V0LmRyYWdnaW5nT3ZlckRvYyA9PT0gMCl7XG4gICAgICAgIHdpZGdldC5zZXR0aW5ncy5vbkRvY3VtZW50RHJhZ0xlYXZlLmNhbGwod2lkZ2V0LmVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJChkb2N1bWVudCkub2ZmKFwiZHJhZ292ZXIuXCIgKyBwbHVnaW5OYW1lKS5vbihcImRyYWdvdmVyLlwiICsgcGx1Z2luTmFtZSwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcbiAgfTtcblxuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5yZWxlYXNlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gTGVhdmUgZXZlcnlvbmUgQUxPTkUgO187XG5cbiAgICB0aGlzLmVsZW1lbnQub2ZmKFwiLlwiICsgcGx1Z2luTmFtZSk7XG4gICAgdGhpcy5lbGVtZW50LmZpbmQoXCJpbnB1dFt0eXBlPWZpbGVdXCIpLm9mZihcIi5cIiArIHBsdWdpbk5hbWUpO1xuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuaG9va0RvY3VtZW50KSB7XG4gICAgICAkKGRvY3VtZW50KS5vZmYoXCIuXCIgKyBwbHVnaW5OYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgRG1VcGxvYWRlci5wcm90b3R5cGUudmFsaWRhdGVGaWxlID0gZnVuY3Rpb24oZmlsZSlcbiAge1xuICAgIC8vIENoZWNrIGZpbGUgc2l6ZVxuICAgIGlmICgodGhpcy5zZXR0aW5ncy5tYXhGaWxlU2l6ZSA+IDApICYmXG4gICAgICAgIChmaWxlLnNpemUgPiB0aGlzLnNldHRpbmdzLm1heEZpbGVTaXplKSkge1xuXG4gICAgICB0aGlzLnNldHRpbmdzLm9uRmlsZVNpemVFcnJvci5jYWxsKHRoaXMuZWxlbWVudCwgZmlsZSk7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmaWxlIHR5cGVcbiAgICBpZiAoKHRoaXMuc2V0dGluZ3MuYWxsb3dlZFR5cGVzICE9PSBcIipcIikgJiZcbiAgICAgICAgIWZpbGUudHlwZS5tYXRjaCh0aGlzLnNldHRpbmdzLmFsbG93ZWRUeXBlcykpe1xuXG4gICAgICB0aGlzLnNldHRpbmdzLm9uRmlsZVR5cGVFcnJvci5jYWxsKHRoaXMuZWxlbWVudCwgZmlsZSk7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmaWxlIGV4dGVuc2lvblxuICAgIGlmICh0aGlzLnNldHRpbmdzLmV4dEZpbHRlciAhPT0gbnVsbCkge1xuICAgICAgdmFyIGV4dCA9IGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiLlwiKS5wb3AoKTtcblxuICAgICAgaWYgKCQuaW5BcnJheShleHQsIHRoaXMuc2V0dGluZ3MuZXh0RmlsdGVyKSA8IDApIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5vbkZpbGVFeHRFcnJvci5jYWxsKHRoaXMuZWxlbWVudCwgZmlsZSk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRG1VcGxvYWRlckZpbGUoZmlsZSwgdGhpcyk7XG4gIH07XG5cbiAgRG1VcGxvYWRlci5wcm90b3R5cGUuYWRkRmlsZXMgPSBmdW5jdGlvbihmaWxlcylcbiAge1xuICAgIHZhciBuRmlsZXMgPSAwO1xuXG4gICAgZm9yICh2YXIgaT0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKVxuICAgIHtcbiAgICAgIHZhciBmaWxlID0gdGhpcy52YWxpZGF0ZUZpbGUoZmlsZXNbaV0pO1xuXG4gICAgICBpZiAoIWZpbGUpe1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2UgZmlsZSB3aWxsIG5vdCBiZSBwcm9jZXNzZWQuIFRoaXMgbWF5IGFsbG93IHNvbWUgY3VzdG9taXphdGlvblxuICAgICAgdmFyIGNhbl9jb250aW51ZSA9IHRoaXMuc2V0dGluZ3Mub25OZXdGaWxlLmNhbGwodGhpcy5lbGVtZW50LCBmaWxlLmlkLCBmaWxlLmRhdGEpO1xuICAgICAgaWYgKGNhbl9jb250aW51ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBhdXRvbWF0aWMgdXBsb2FkaW5nLCBhbmQgbm90IGEgZmlsZSBxdWV1ZTogZ28gZm9yIHRoZSB1cGxvYWRcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG8gJiYgIXRoaXMuc2V0dGluZ3MucXVldWUpIHtcbiAgICAgICAgZmlsZS51cGxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGZpbGUpO1xuICAgICAgXG4gICAgICBuRmlsZXMrKztcbiAgICB9XG5cbiAgICAvLyBObyBmaWxlcyB3ZXJlIGFkZGVkXG4gICAgaWYgKG5GaWxlcyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQXJlIHdlIGF1dG8tdXBsb2FkaW5nIGZpbGVzP1xuICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG8gJiYgdGhpcy5zZXR0aW5ncy5xdWV1ZSAmJiAhdGhpcy5xdWV1ZVJ1bm5pbmcpIHtcbiAgICAgIHRoaXMucHJvY2Vzc1F1ZXVlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgRG1VcGxvYWRlci5wcm90b3R5cGUucHJvY2Vzc1F1ZXVlID0gZnVuY3Rpb24oKVxuICB7XG4gICAgdGhpcy5xdWV1ZVBvcysrO1xuXG4gICAgaWYgKHRoaXMucXVldWVQb3MgPj0gdGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLmFjdGl2ZUZpbGVzID09PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Mub25Db21wbGV0ZS5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhaXQgdW50aWwgbmV3IGZpbGVzIGFyZSBkcm9wZWRcbiAgICAgIHRoaXMucXVldWVQb3MgPSAodGhpcy5xdWV1ZS5sZW5ndGggLSAxKTtcblxuICAgICAgdGhpcy5xdWV1ZVJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucXVldWVSdW5uaW5nID0gdHJ1ZTtcblxuICAgIC8vIFN0YXJ0IG5leHQgZmlsZVxuICAgIHJldHVybiB0aGlzLnF1ZXVlW3RoaXMucXVldWVQb3NdLnVwbG9hZCgpO1xuICB9O1xuXG4gIERtVXBsb2FkZXIucHJvdG90eXBlLnJlc3RhcnRRdWV1ZSA9IGZ1bmN0aW9uKClcbiAge1xuICAgIHRoaXMucXVldWVQb3MgPSAtMTtcbiAgICB0aGlzLnF1ZXVlUnVubmluZyA9IGZhbHNlO1xuXG4gICAgdGhpcy5wcm9jZXNzUXVldWUoKTtcbiAgfTtcblxuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5maW5kQnlJZCA9IGZ1bmN0aW9uKGlkKVxuICB7XG4gICAgdmFyIHIgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMucXVldWVbaV0uaWQgPT09IGlkKSB7XG4gICAgICAgIHIgPSB0aGlzLnF1ZXVlW2ldO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5jYW5jZWxBbGwgPSAgZnVuY3Rpb24oKVxuICB7XG4gICAgdmFyIHF1ZXVlV2FzUnVubmluZyA9IHRoaXMucXVldWVSdW5uaW5nO1xuICAgIHRoaXMucXVldWVSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAvLyBjYW5jZWwgJ2VtIGFsbFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5xdWV1ZVtpXS5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBpZiAocXVldWVXYXNSdW5uaW5nKSB7XG4gICAgICB0aGlzLnNldHRpbmdzLm9uQ29tcGxldGUuY2FsbCh0aGlzLmVsZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5zdGFydEFsbCA9IGZ1bmN0aW9uKClcbiAge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLnF1ZXVlKSB7XG4gICAgICAvLyBSZXN1bWUgcXVldWVcbiAgICAgIHRoaXMucmVzdGFydFF1ZXVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG9yIHVwbG9hZCB0aGVtIGFsbFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMucXVldWVbaV0udXBsb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFB1YmxpYyBBUEkgbWV0aG9kc1xuICBEbVVwbG9hZGVyLnByb3RvdHlwZS5tZXRob2RzID0ge1xuICAgIHN0YXJ0OiBmdW5jdGlvbihpZCkge1xuICAgICAgaWYgKHRoaXMucXVldWVSdW5uaW5nKXtcbiAgICAgICAgLy8gRG8gbm90IGFsbG93IHRvIG1hbnVhbGx5IHVwbG9hZCBGaWxlcyB3aGVuIGEgcXVldWUgaXMgcnVubmluZ1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaWxlID0gZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlb2YgaWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZmlsZSA9IHRoaXMuZmluZEJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgIC8vIEZpbGUgbm90IGZvdW5kIGluIHN0YWNrXG4gICAgICAgICAgJC5lcnJvcihcIkZpbGUgbm90IGZvdW5kIGluIGpRdWVyeS5kbVVwbG9hZGVyXCIpO1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFRyeWluZyB0byBTdGFydCBhbiB1cGxvYWQgYnkgSURcbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgIGlmIChmaWxlLnN0YXR1cyA9PT0gRmlsZVN0YXR1cy5DQU5DRUxMRUQpIHtcbiAgICAgICAgICBmaWxlLnN0YXR1cyA9IEZpbGVTdGF0dXMuUEVORElORztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZS51cGxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2l0aCBubyBpZCBwcm92aWRlZC4uLlxuXG4gICAgICB0aGlzLnN0YXJ0QWxsKCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgY2FuY2VsOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGZpbGUgPSBmYWxzZTtcbiAgICAgIGlmICh0eXBlb2YgaWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZmlsZSA9IHRoaXMuZmluZEJ5SWQoaWQpO1xuXG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgIC8vIEZpbGUgbm90IGZvdW5kIGluIHN0YWNrXG4gICAgICAgICAgJC5lcnJvcihcIkZpbGUgbm90IGZvdW5kIGluIGpRdWVyeS5kbVVwbG9hZGVyXCIpO1xuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBmaWxlLmNhbmNlbCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2l0aCBubyBpZCBwcm92aWRlZC4uLlxuICAgICAgXG4gICAgICB0aGlzLmNhbmNlbEFsbCgpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcblxuICAgICAgdGhpcy5jYW5jZWxBbGwoKTtcblxuICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgICAgdGhpcy5xdWV1ZVBvcyA9IC0xO1xuICAgICAgdGhpcy5hY3RpdmVGaWxlcyA9IDA7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNhbmNlbEFsbCgpO1xuXG4gICAgICB0aGlzLnJlbGVhc2VFdmVudHMoKTtcblxuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZURhdGEocGx1Z2luTmFtZSk7XG4gICAgfVxuICB9O1xuXG4gICQuZm4uZG1VcGxvYWRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGx1Z2luID0gJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpO1xuXG4gICAgICAgIGlmIChwbHVnaW4gaW5zdGFuY2VvZiBEbVVwbG9hZGVyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW4ubWV0aG9kc1tvcHRpb25zXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBwbHVnaW4ubWV0aG9kc1tvcHRpb25zXS5hcHBseShwbHVnaW4sIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5lcnJvcihcIk1ldGhvZCBcIiArICBvcHRpb25zICsgXCIgZG9lcyBub3QgZXhpc3QgaW4galF1ZXJ5LmRtVXBsb2FkZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQuZXJyb3IoXCJVbmtub3duIHBsdWdpbiBkYXRhIGZvdW5kIGJ5IGpRdWVyeS5kbVVwbG9hZGVyXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUpKSB7XG4gICAgICAgICAgJC5kYXRhKHRoaXMsIHBsdWdpbk5hbWUsIG5ldyBEbVVwbG9hZGVyKHRoaXMsIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSkpOyJdLCJuYW1lcyI6WyJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJ3aW5kb3ciLCJqUXVlcnkiLCIkIiwicGx1Z2luTmFtZSIsIkZpbGVTdGF0dXMiLCJQRU5ESU5HIiwiVVBMT0FESU5HIiwiQ09NUExFVEVEIiwiRkFJTEVEIiwiQ0FOQ0VMTEVEIiwiZGVmYXVsdHMiLCJhdXRvIiwicXVldWUiLCJkbmQiLCJob29rRG9jdW1lbnQiLCJtdWx0aXBsZSIsInVybCIsImRvY3VtZW50IiwiVVJMIiwibWV0aG9kIiwiZXh0cmFEYXRhIiwiaGVhZGVycyIsImRhdGFUeXBlIiwiZmllbGROYW1lIiwibWF4RmlsZVNpemUiLCJhbGxvd2VkVHlwZXMiLCJleHRGaWx0ZXIiLCJvbkluaXQiLCJvbkNvbXBsZXRlIiwib25GYWxsYmFja01vZGUiLCJvbk5ld0ZpbGUiLCJvbkJlZm9yZVVwbG9hZCIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFN1Y2Nlc3MiLCJvblVwbG9hZENhbmNlbGVkIiwib25VcGxvYWRFcnJvciIsIm9uVXBsb2FkQ29tcGxldGUiLCJvbkZpbGVUeXBlRXJyb3IiLCJvbkZpbGVTaXplRXJyb3IiLCJvbkZpbGVFeHRFcnJvciIsIm9uRHJhZ0VudGVyIiwib25EcmFnTGVhdmUiLCJvbkRvY3VtZW50RHJhZ0VudGVyIiwib25Eb2N1bWVudERyYWdMZWF2ZSIsIkRtVXBsb2FkZXJGaWxlIiwiZmlsZSIsIndpZGdldCIsImRhdGEiLCJqcVhIUiIsInN0YXR1cyIsImlkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwicHJvdG90eXBlIiwidXBsb2FkIiwiY2FuVXBsb2FkIiwicXVldWVSdW5uaW5nIiwicHJvY2Vzc1F1ZXVlIiwiZmQiLCJGb3JtRGF0YSIsImFwcGVuZCIsInNldHRpbmdzIiwiY3VzdG9tRGF0YSIsImNhbGwiLCJlbGVtZW50IiwiZWFjaCIsImV4S2V5IiwiZXhWYWwiLCJhY3RpdmVGaWxlcyIsImFqYXgiLCJ0eXBlIiwiY2FjaGUiLCJjb250ZW50VHlwZSIsInByb2Nlc3NEYXRhIiwiZm9yY2VTeW5jIiwieGhyIiwiZ2V0WGhyIiwic3VjY2VzcyIsIm9uU3VjY2VzcyIsImVycm9yIiwiZXJyTXNnIiwib25FcnJvciIsImNvbXBsZXRlIiwieGhyb2JqIiwiYWpheFNldHRpbmdzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwicGVyY2VudCIsInBvc2l0aW9uIiwibG9hZGVkIiwidG90YWwiLCJ0b3RhbFNpemUiLCJsZW5ndGhDb21wdXRhYmxlIiwiY2VpbCIsImNhbmNlbCIsImFib3J0IiwibXlTdGF0dXMiLCJEbVVwbG9hZGVyIiwib3B0aW9ucyIsImV4dGVuZCIsImNoZWNrU3VwcG9ydCIsImluaXQiLCJleHAiLCJSZWdFeHAiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicHJvcCIsInF1ZXVlUG9zIiwiZHJhZ2dpbmdPdmVyIiwiZHJhZ2dpbmdPdmVyRG9jIiwiaW5wdXQiLCJpcyIsImZpbmQiLCJsZW5ndGgiLCJvbiIsImV2dCIsImZpbGVzIiwidGFyZ2V0IiwiYWRkRmlsZXMiLCJ2YWwiLCJpbml0RG5EIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJvcmlnaW5hbEV2ZW50IiwicHVzaCIsIm9mZiIsInJlbGVhc2VFdmVudHMiLCJ2YWxpZGF0ZUZpbGUiLCJzaXplIiwibWF0Y2giLCJleHQiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsInBvcCIsImluQXJyYXkiLCJuRmlsZXMiLCJpIiwiY2FuX2NvbnRpbnVlIiwicmVzdGFydFF1ZXVlIiwiZmluZEJ5SWQiLCJyIiwiY2FuY2VsQWxsIiwicXVldWVXYXNSdW5uaW5nIiwic3RhcnRBbGwiLCJtZXRob2RzIiwic3RhcnQiLCJyZXNldCIsImRlc3Ryb3kiLCJyZW1vdmVEYXRhIiwiZm4iLCJkbVVwbG9hZGVyIiwiYXJncyIsImFyZ3VtZW50cyIsInBsdWdpbiIsImFwcGx5IiwiQXJyYXkiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dm-file-uploader/src/js/jquery.dm-uploader.js\n");

/***/ })

};
;